[{"D:\\Github\\WeReApp\\we-read-app\\src\\index.js":"1","D:\\Github\\WeReApp\\we-read-app\\src\\App.js":"2","D:\\Github\\WeReApp\\we-read-app\\src\\components\\PrivateRoute.js":"3","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\profile.js":"4","D:\\Github\\WeReApp\\we-read-app\\src\\components\\navBar\\navBar.js":"5","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\reading.js":"6","D:\\Github\\WeReApp\\we-read-app\\src\\components\\stickyFooter\\StickyFooter.js":"7","D:\\Github\\WeReApp\\we-read-app\\src\\components\\detail\\detail.js":"8","D:\\Github\\WeReApp\\we-read-app\\src\\components\\searching\\searching.js":"9","D:\\Github\\WeReApp\\we-read-app\\src\\components\\uploading\\uploading.js":"10","D:\\Github\\WeReApp\\we-read-app\\src\\components\\home\\home.js":"11","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\AnalystCard.js":"12","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\FavoriteCard.js":"13","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\SettingCard.js":"14","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\AddNovel.js":"15","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\ManagementCard.js":"16","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\Infor.js":"17","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\globalStyles.js":"18","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\ReadingPanel.js":"19","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\InfoPanel.js":"20","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\Toolbar.js":"21","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\ControlPanel.js":"22","D:\\Github\\WeReApp\\we-read-app\\src\\components\\uploading\\groupHeader.js":"23","D:\\Github\\WeReApp\\we-read-app\\src\\resources\\data\\data.js":"24"},{"size":183,"mtime":1608730772288,"results":"25","hashOfConfig":"26"},{"size":2103,"mtime":1611326452281,"results":"27","hashOfConfig":"26"},{"size":484,"mtime":1609988336926,"results":"28","hashOfConfig":"26"},{"size":2150,"mtime":1609988337023,"results":"29","hashOfConfig":"26"},{"size":5926,"mtime":1611326632094,"results":"30","hashOfConfig":"26"},{"size":3721,"mtime":1611316523006,"results":"31","hashOfConfig":"26"},{"size":6148,"mtime":1610175388661,"results":"32","hashOfConfig":"26"},{"size":17164,"mtime":1611318037817,"results":"33","hashOfConfig":"26"},{"size":21470,"mtime":1611316699741,"results":"34","hashOfConfig":"26"},{"size":20913,"mtime":1611316523007,"results":"35","hashOfConfig":"26"},{"size":18236,"mtime":1611305993614,"results":"36","hashOfConfig":"26"},{"size":4493,"mtime":1609988336984,"results":"37","hashOfConfig":"26"},{"size":2637,"mtime":1609988336988,"results":"38","hashOfConfig":"26"},{"size":2455,"mtime":1609988336992,"results":"39","hashOfConfig":"26"},{"size":2557,"mtime":1611074255128,"results":"40","hashOfConfig":"26"},{"size":2516,"mtime":1609988336992,"results":"41","hashOfConfig":"26"},{"size":2788,"mtime":1611243809511,"results":"42","hashOfConfig":"26"},{"size":574,"mtime":1609988337077,"results":"43","hashOfConfig":"26"},{"size":6760,"mtime":1611316523004,"results":"44","hashOfConfig":"26"},{"size":5292,"mtime":1611316523003,"results":"45","hashOfConfig":"26"},{"size":4252,"mtime":1611316523005,"results":"46","hashOfConfig":"26"},{"size":2927,"mtime":1611316523002,"results":"47","hashOfConfig":"26"},{"size":652,"mtime":1609988337093,"results":"48","hashOfConfig":"26"},{"size":22426,"mtime":1611318014699,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"16nb1l4",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"52"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"D:\\Github\\WeReApp\\we-read-app\\src\\index.js",[],["115","116"],"D:\\Github\\WeReApp\\we-read-app\\src\\App.js",[],"D:\\Github\\WeReApp\\we-read-app\\src\\components\\PrivateRoute.js",[],"D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\profile.js",["117","118","119"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n    Container,\r\n    Grid,\r\n    makeStyles,\r\n    Button, Box\r\n} from '@material-ui/core';\r\nimport AnalystCard from \"./AnalystCard\";\r\nimport FavoriteCard from \"./FavoriteCard\";\r\nimport ManagementCard from \"./ManagementCard\";\r\nimport SettingCard from \"./SettingCard\";\r\nimport Infor from \"./Infor\";\r\nimport AddNovel from \"./AddNovel\";\r\n\r\nfunction Profile() {\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [])\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Container maxWidth={false}>\r\n            <Grid>\r\n                <Infor />\r\n            </Grid>\r\n            <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"  justify=\"center\"  alignItems=\"center\"\r\n            >\r\n                <Grid\r\n                    item\r\n                >\r\n                    <Button\r\n                        size=\"large\"\r\n                    >\r\n                        <FavoriteCard />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid\r\n                    item\r\n\r\n                >\r\n                    <Button size=\"large\">\r\n                        <AnalystCard />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid\r\n                    item\r\n\r\n                >\r\n                    <Button size=\"large\"\r\n                            onClick={() => { history.push(\"/Uploading\"); }}\r\n                    >\r\n                        <AddNovel />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid\r\n                    item\r\n\r\n                >\r\n                    <Button size=\"large\"\r\n                    >\r\n                        <ManagementCard />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid\r\n                    item\r\n\r\n                >\r\n                    <Button size=\"large\">\r\n                        <SettingCard />\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","D:\\Github\\WeReApp\\we-read-app\\src\\components\\navBar\\navBar.js",["120","121","122","123","124","125","126","127"],"D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\reading.js",["128","129","130","131"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Divider,\r\n  makeStyles,\r\n  useTheme\r\n} from '@material-ui/core';\r\n\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\n\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { GlobalStyles } from './globalStyles';\r\nimport { lightTheme, darkTheme } from '../../constants/config.json';\r\n\r\nimport ReadingPanel from './ReadingPanel';\r\nimport InfoPanel from './InfoPanel';\r\nimport Toolbar from './Toolbar';\r\nimport ControlPanel from './ControlPanel';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: (theme) => ({\r\n    width: '90%',\r\n    minHeight: '100%',\r\n    borderRadius: '4px',\r\n    paddingBottom: '24px',\r\n    paddingTop: '24px',\r\n  }),\r\n  card: (theme) => ({\r\n    backgroundColor: theme.body,\r\n    border: theme.fieldBorder,\r\n  }),\r\n  cardHeader: {\r\n    color: '#FFFFFF',\r\n    backgroundColor: '#0452BB'\r\n  },\r\n  cardContent: (theme) => ({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-start',\r\n    padding: '5px 0px',\r\n    backgroundColor: theme.body,\r\n  }),\r\n  divider: (theme) => ({\r\n    border: theme.fieldBorder\r\n  })\r\n}));\r\n\r\nconst data = [\r\n  {\r\n    number: 1,\r\n    title: 'Tiêu đề chương 1',\r\n    selected: false,\r\n  },\r\n  {\r\n    number: 2,\r\n    title: 'Tiêu đề chương 2',\r\n    selected: false,\r\n  },\r\n  {\r\n    number: 3,\r\n    title: 'Tiêu đề chương 3',\r\n    selected: false,\r\n  },\r\n  {\r\n    number: 4,\r\n    title: 'Tiêu đề chương 4 ',\r\n    selected: true,\r\n  },\r\n  {\r\n    number: 5,\r\n    title: 'Tiêu đề chương 5',\r\n    selected: false,\r\n  },\r\n  {\r\n    number: 6,\r\n    title: 'Tiêu đề chương 6',\r\n    selected: false,\r\n  },\r\n\r\n]\r\n\r\nconst Reading = () => {\r\n  const [chapterList, setChapterList] = useState(data);\r\n  const [font, setFont] = useState(\"Arial\");\r\n  const [fontSize, setFontSize] = useState(16);\r\n  const [indent, setIndent] = useState('90%');\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const ID = useParams().fictionID;\r\n  const classes = useStyles(isDarkMode ? darkTheme : lightTheme);\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [])\r\n\r\n\r\n  const selected = chapterList.filter((chapter) => chapter.selected === true);\r\n  return (\r\n    <React.Fragment>\r\n      <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\r\n        <GlobalStyles />\r\n      </ThemeProvider>\r\n\r\n      <Container className={classes.root} maxWidth=\"false\">\r\n        <Card className={classes.card}>\r\n          <CardHeader className={classes.cardHeader}\r\n            avatar={<MenuBookIcon style={{ fontSize: 30 }} />}\r\n            titleTypographyProps={{ variant: 'h5', align: \"left\" }}\r\n            title=\"Đọc truyện\" />\r\n          <CardContent className={classes.cardContent}>\r\n            <InfoPanel theme={isDarkMode ? darkTheme : lightTheme} ID={ID} />\r\n            <Divider className={classes.divider} />\r\n            <Toolbar\r\n              font={font} setFont={(i) => setFont(i)}\r\n              fontSize={fontSize} setFontSize={(i) => setFontSize(i)}\r\n              indent={indent} setIndent={(i) => setIndent(i)}\r\n              theme={isDarkMode ? darkTheme : lightTheme}\r\n              isDarkMode={isDarkMode}\r\n              setIsDarkMode={setIsDarkMode}\r\n            />\r\n            <Divider className={classes.divider} />\r\n            <ControlPanel theme={isDarkMode ? darkTheme : lightTheme} />\r\n            <Divider className={classes.divider} />\r\n            <ReadingPanel\r\n              selected={selected[0]}\r\n              font={font}\r\n              fontSize={fontSize}\r\n              indent={indent}\r\n              theme={isDarkMode ? darkTheme : lightTheme}\r\n            />\r\n            <Divider className={classes.divider} />\r\n            <ControlPanel theme={isDarkMode ? darkTheme : lightTheme} />\r\n            <Divider className={classes.divider} />\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Reading;","D:\\Github\\WeReApp\\we-read-app\\src\\components\\stickyFooter\\StickyFooter.js",[],"D:\\Github\\WeReApp\\we-read-app\\src\\components\\detail\\detail.js",["132","133","134","135","136","137","138"],"import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  makeStyles,\r\n  Typography,\r\n  Divider,\r\n  Tooltip,\r\n  Button,\r\n  Card,\r\n  TextField,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport BookmarkIcon from '@material-ui/icons/Bookmark';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\r\nimport defaultImg from '../../resources/images/defaultAvatar.png';\r\nimport { category, tags, novels, topMonth, imgURL, detail, detailTest } from '../../resources/data/data'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'inline-block',\r\n    width: '100%',\r\n    marginTop: '24px'\r\n  },\r\n  rightContainer: {\r\n    float: \"right\",\r\n    width: '69%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    textAlign: 'left',\r\n  },\r\n  leftContainer: {\r\n    float: \"left\",\r\n    width: '31%',\r\n    textAlign: 'center',\r\n  },\r\n  viewsAndFollowers: {\r\n    display: 'flex',\r\n    flexDirection: 'row'\r\n  },\r\n  divider: {\r\n    backgroundColor: 'black'\r\n  },\r\n  button: {\r\n    padding: 0,\r\n    borderRadius: '8px',\r\n    lineHeight: 'normal',\r\n    fontWeight: 'normal',\r\n    textTransform: 'none',\r\n    color: 'white',\r\n    backgroundColor: '#27ae60',\r\n    \"&:hover\": {\r\n      backgroundColor: '#0d5e36',\r\n    }\r\n  },\r\n  readNowButton: {\r\n    padding: 0,\r\n    borderRadius: '8px',\r\n    lineHeight: 'normal',\r\n    fontWeight: 'normal',\r\n    textTransform: 'none',\r\n  },\r\n  pagination: {\r\n    '& > *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    '& .Mui-selected': {\r\n      backgroundColor: '#0057B2',\r\n      color: 'white',\r\n    }\r\n  }\r\n}));\r\n\r\nconst offset = 5;\r\nconst fontSize = {\r\n  title: '44px',\r\n  label: '24px',\r\n  button: '20px',\r\n  header: '30px'\r\n}\r\n\r\nfunction Detail() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const ID = +useParams().fictionID;\r\n  const [commentPage, setCommentPage] = useState(1);\r\n  const [fiction, setFiction] = useState(detail);\r\n  const [rating, setRating] = useState(0);\r\n\r\n  useEffect(() => {\r\n\r\n    if (ID === 1000) {\r\n      setFiction(detailTest);\r\n    }\r\n    else {\r\n      window.scrollTo(0, 0);\r\n      const fictionCopy = JSON.parse(JSON.stringify(fiction));\r\n      if (ID <= 25) {\r\n        fictionCopy.id = novels[ID - 1].id;\r\n        fictionCopy.title = novels[ID - 1].name;\r\n        fictionCopy.imgURL = imgURL[novels[ID - 1].id % imgURL.length];\r\n        fictionCopy.rating = novels[ID - 1].rating;\r\n        fictionCopy.views = novels[ID - 1].view;\r\n      } else {\r\n        fictionCopy.id = topMonth[ID - 25 - 1].id;\r\n        fictionCopy.title = topMonth[ID - 25 - 1].name;\r\n        fictionCopy.imgURL = topMonth[ID - 25 - 1].img;\r\n        fictionCopy.rating = topMonth[ID - 25 - 1].rating;\r\n        fictionCopy.views = topMonth[ID - 25 - 1].view;\r\n\r\n      }\r\n      setFiction(fictionCopy);\r\n      setRating(fictionCopy.rating);\r\n    }\r\n  }, []);\r\n\r\n  const calculateDaysAdded = (fromDate, toDate) => {\r\n    // To calculate the time difference of two dates \r\n    var differenceInTime = toDate.getTime() - fromDate.getTime();\r\n\r\n    // To calculate the no. of days between two dates \r\n    var differenceInDays = differenceInTime / (1000 * 3600 * 24);\r\n    return Math.round(differenceInDays);\r\n  }\r\n\r\n  const createChaptersList = (chapters) => {\r\n    let list = [];\r\n    for (let i = chapters.length - 1; i >= 0; i--) {\r\n      list.push(\r\n        <Card key={i} style={{\r\n          height: '56px', backgroundColor: '#e5e5e5', display: 'flex',\r\n          alignItems: 'center', marginBottom: '2px', paddingLeft: '15px', paddingRight: '10px'\r\n        }}\r\n        >\r\n          <Typography style={{ fontSize: '16px', width: '30%', color: '#0276af', textDecoration: 'underline' }}>\r\n            <Link key={chapters[i].ordinal} to={\"/Reading/\" + fiction.id + \"/\" + chapters[i].ordinal}>\r\n              Chương {chapters[i].ordinal}\r\n            </Link>\r\n          </Typography>\r\n          <Typography style={{ fontSize: '16px', width: '40%', textAlign: 'center' }}>\r\n            Cập nhật vào khoảng {calculateDaysAdded(new Date(chapters[i].dateAdded), new Date())} ngày\r\n          </Typography>\r\n          <Typography style={{ fontSize: '16px', width: '30%', textAlign: 'right' }}>\r\n            {chapters[i].views} lượt xem\r\n          </Typography>\r\n        </Card>\r\n      );\r\n    }\r\n    return list;\r\n  }\r\n\r\n  const createCommentsList = (comments) => {\r\n    let list = [];\r\n    let start = offset * (commentPage - 1);\r\n    let end = offset * commentPage > comments.length ? comments.length : offset * commentPage;\r\n    for (let i = start; i < end; i++) {\r\n      list.push(\r\n        <Card key={i} style={{ backgroundColor: '#e5e5e5', padding: '10px', marginBottom: '3px' }}>\r\n          <div style={{ display: 'flex' }}>\r\n            <AccountCircle style={{ width: '5%', height: '40px' }}></AccountCircle>\r\n            <div style={{ width: '90%' }}>\r\n              <Typography style={{ fontSize: '16px', fontWeight: 'bold' }}>\r\n                {comments[i].name}\r\n              </Typography>\r\n              <Typography>\r\n                Khoảng {calculateDaysAdded(new Date(comments[i].dateAdded), new Date())} ngày trước\r\n              </Typography>\r\n            </div>\r\n            <div style={{ flexDirection: 'column', width: '5%', textAlign: 'center' }}>\r\n              <Tooltip title=\"Không thích\" aria-label=\"Không thích\">\r\n                <IconButton size='small'>\r\n                  <ThumbDownIcon style={{ color: '#979797', width: '40px', height: '40px' }} />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <Typography>{comments[i].dislikeCount}</Typography>\r\n            </div>\r\n            <div style={{ flexDirection: 'column', width: '5%', textAlign: 'center' }}>\r\n              <Tooltip title=\"Thích\" aria-label=\"Thích\">\r\n                <IconButton size='small'>\r\n                  <ThumbUpIcon style={{ color: '#0e4da4', width: '40px', height: '40px' }} />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <Typography>{comments[i].likeCount}</Typography>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <Typography style={{ fontSize: '16px', wordBreak: 'break-all', textAlign: 'justify' }}>\r\n              {comments[i].text}\r\n            </Typography>\r\n          </div>\r\n        </Card>\r\n      );\r\n    }\r\n    return list;\r\n  }\r\n\r\n  const handleMoveToReadingPage = () => {\r\n    history.push(`/Reading/${ID}/1`);\r\n  }\r\n\r\n  const handleSearchGenre = (genreID) => {\r\n    history.push(`/Searching?genre=${genreID}`);\r\n  }\r\n  const handleSearchTag = (tagID) => {\r\n    history.push(`/Searching?tag=${tagID}`);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container component=\"main\" maxWidth=\"lg\">\r\n        <div className={classes.container}>\r\n          <div className={classes.leftContainer}>\r\n            <img height={425} width={350} src={fiction.imgURL === \"none\" ? defaultImg : fiction.imgURL} alt=\"Default fiction\"\r\n              style={{ border: \"1px solid black\" }}\r\n            />\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              <div>\r\n                <Rating name=\"size-large\" value={rating} precision={0.5} size=\"large\"\r\n                  onChange={(event, newValue) => {\r\n                    if (newValue) {\r\n                      setRating(newValue);\r\n                    }\r\n                    else {\r\n                      setRating(0);\r\n                    }\r\n                  }} />\r\n              </div>\r\n              <Typography style={{ fontSize: fontSize.label, marginLeft: '10px' }}>\r\n                {rating + \"/5\"}\r\n              </Typography>\r\n            </div>\r\n            <Typography style={{ textAlign: 'center', fontSize: fontSize.label }}>\r\n              với {fiction.reviews.length} lượt đánh giá\r\n            </Typography>\r\n          </div>\r\n\r\n          <div className={classes.rightContainer}>\r\n            <Typography style={{ fontSize: fontSize.title }}>{fiction.title}</Typography>\r\n            <Divider className={classes.divider}></Divider>\r\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n              <Typography style={{ fontSize: fontSize.label, display: 'flex' }}>\r\n                Tác giả:&nbsp;\r\n              </Typography>\r\n              {fiction.authors.map(author =>\r\n                <Link key={author.id} to=\"/Profile\"\r\n                  style={{ textDecoration: 'none', fontSize: fontSize.label, color: '#0b79d0' }}\r\n                >\r\n                  {author.name}&nbsp;\r\n                </Link>\r\n              )}\r\n            </div>\r\n            <Divider className={classes.divider} style={{ marginBottom: '5px' }}></Divider>\r\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n              <Typography style={{ fontSize: fontSize.label, marginRight: '3px' }}>\r\n                Thể loại:\r\n              </Typography>\r\n              {fiction.genres.map(genre => {\r\n                const cat = category.filter(cat => cat.id === genre);\r\n                if (cat.length !== 0) {\r\n                  return (\r\n                    <Button key={cat[0].id} className={classes.button}\r\n                      onClick={() => handleSearchGenre(genre.id)}\r\n                      style={{\r\n                        height: '36px', width: '150px', color: 'white',\r\n                        backgroundColor: '#2196f3', marginRight: '10px', fontSize: fontSize.button\r\n                      }}\r\n                    >\r\n                      {cat[0].name}\r\n                    </Button>)\r\n                }\r\n              })}\r\n            </div>\r\n            <Divider className={classes.divider} style={{ marginTop: '5px', marginBottom: '5px' }}></Divider>\r\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n              <Typography style={{ fontSize: fontSize.label, marginRight: '23px' }}>\r\n                Tag(s):\r\n              </Typography>\r\n              {fiction.tags.map(tag => {\r\n                const tempTag = tags.filter(i => i.id === tag);\r\n                if (tempTag.length !== 0) {\r\n                  return (\r\n                    <Button key={tempTag[0].id} className={classes.button} style={{\r\n                      height: '36px', width: '150px', color: 'white',\r\n                      backgroundColor: '#2196f3', marginRight: '10px', fontSize: fontSize.button\r\n                    }}\r\n                      onClick={() => handleSearchTag(tempTag[0].id)}\r\n                    >\r\n                      {tempTag[0].name}\r\n                    </Button>)\r\n                }\r\n              })}\r\n            </div>\r\n            <Divider className={classes.divider} style={{ marginTop: '5px' }}></Divider>\r\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n              <Typography style={{ fontSize: fontSize.label, display: 'flex' }}>\r\n                Độ tuổi:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </Typography>\r\n              {fiction.age.map(age =>\r\n                <Typography component={'span'} key={age.id} style={{ fontSize: fontSize.label }}>\r\n                  {age.name}&nbsp;\r\n                  </Typography>\r\n              )}\r\n            </div>\r\n            <Divider className={classes.divider}></Divider>\r\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n              <Typography style={{ fontSize: fontSize.label, display: 'flex' }}>\r\n                Ngôn ngữ:&nbsp;\r\n              </Typography>\r\n              {fiction.languages.map(language =>\r\n                <Typography component={'span'} key={language.id} style={{ fontSize: fontSize.label }}>\r\n                  {language.name}&nbsp;\r\n                  </Typography>\r\n              )}\r\n            </div>\r\n            <Divider className={classes.divider}></Divider>\r\n            <Typography style={{ fontSize: fontSize.label }}>\r\n              Trạng thái:\r\n              {fiction.status === 1 ? \" Đang cập nhật\" : fiction.status === 2 ? \" Hoàn chỉnh\" : \" Bị hủy\"}\r\n            </Typography>\r\n            <Divider className={classes.divider}></Divider>\r\n            <div className={classes.viewsAndFollowers}>\r\n              <Typography style={{ fontSize: fontSize.label, width: '50%' }}>\r\n                Lượt xem:<b>&nbsp;{fiction.views}</b>\r\n              </Typography>\r\n              <Typography style={{ fontSize: fontSize.label, width: '50%' }}>\r\n                Theo dõi:&nbsp;<b>{fiction.followers}</b>\r\n              </Typography>\r\n            </div>\r\n            <Divider className={classes.divider} style={{ marginBottom: '10px' }}></Divider>\r\n            <div style={{ textAlign: 'center' }}>\r\n              <Button variant=\"contained\" color=\"secondary\" className={classes.readNowButton}\r\n                onClick={handleMoveToReadingPage}\r\n                style={{\r\n                  width: '300px', height: '60px', fontSize: '24px', fontWeight: 'bold', marginRight: '24px'\r\n                }}\r\n              >\r\n                Đọc ngay\r\n              </Button>\r\n              <Tooltip title=\"Bình luận\" aria-label=\"Bình luận\">\r\n                <Button className={classes.button} style={{\r\n                  width: '60px', height: '60px', marginRight: '24px'\r\n                }}\r\n                  href=\"#commentSection\"\r\n                >\r\n                  <QuestionAnswerIcon style={{ width: '48px', height: '48px' }} />\r\n                </Button>\r\n              </Tooltip>\r\n              <Tooltip title=\"Lưu vào yêu thích\" aria-label=\"Lưu vào yêu thích\">\r\n                <Button className={classes.button} style={{\r\n                  width: '60px', height: '60px', marginRight: '24px'\r\n                }}\r\n                >\r\n                  <BookmarkIcon style={{ width: '48px', height: '48px' }} />\r\n                </Button>\r\n              </Tooltip>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.container} style={{ textAlign: 'left' }}>\r\n          <Typography style={{ fontSize: fontSize.header }}>Nội dung</Typography>\r\n          <Divider className={classes.divider}></Divider>\r\n          {ID !== 1000 ?\r\n            <Typography style={{ fontSize: fontSize.label, whiteSpace: 'pre-line', textAlign: 'justify', fontSize: '18px' }}>\r\n              {fiction.description}\r\n            </Typography>\r\n            : <div style={{ fontSize: fontSize.label, textAlign: 'justify', fontSize: '18px' }}\r\n              dangerouslySetInnerHTML={{ __html: fiction.description }} />\r\n          }\r\n        </div>\r\n        <div className={classes.container} style={{ textAlign: 'left' }}>\r\n          <Typography style={{ fontSize: fontSize.header }}>\r\n            Danh sách các chương ({fiction.chapters.length})\r\n          </Typography>\r\n          <Divider className={classes.divider} style={{ marginTop: '-3px', marginBottom: '5px' }}></Divider>\r\n          <div style={{ overflowY: 'scroll', maxHeight: '280px' }}>\r\n            {createChaptersList(fiction.chapters)}\r\n          </div>\r\n        </div>\r\n        <div id=\"commentSection\" className={classes.container} style={{ textAlign: 'left' }}>\r\n          <Typography style={{ fontSize: fontSize.header }}>\r\n            Bình luận ({fiction.comments.length})\r\n          </Typography>\r\n          <Divider className={classes.divider} style={{ marginTop: '-3px', marginBottom: '5px' }}></Divider>\r\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginBottom: '10px' }}>\r\n            <TextField placeholder=\"  Nhập bình luận...\" fullWidth multiline rows={5} rowsMax={5}\r\n              style={{ backgroundColor: '#bbbbbb', marginBottom: '10px' }}\r\n              inputProps={{ style: { fontSize: '16px' } }} // font size of input text\r\n            />\r\n            <Button className={classes.button} variant=\"contained\" color=\"secondary\"\r\n              style={{ width: '150px', height: '40px', textTransform: 'none', borderRadius: '8px', fontSize: fontSize.button }}>\r\n              <QuestionAnswerIcon style={{ width: '30px', height: '30px' }} />\r\n              &nbsp;Bình luận\r\n            </Button>\r\n          </div>\r\n          <div>\r\n            {createCommentsList(fiction.comments)}\r\n          </div>\r\n          <br></br>\r\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n            <Pagination className={classes.pagination} size=\"large\" color=\"primary\" shape=\"rounded\"\r\n              count={Math.ceil(fiction.comments.length / offset)} /*showFirstButton showLastButton*/\r\n              onChange={(event, value) => setCommentPage(value)} />\r\n          </div>\r\n          <br></br>\r\n        </div>\r\n      </Container>\r\n    </React.Fragment >\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n","D:\\Github\\WeReApp\\we-read-app\\src\\components\\searching\\searching.js",["139","140","141","142","143","144","145","146","147","148","149"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams, useHistory, useLocation } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport * as data from '../../resources/data/data';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport StarHalfIcon from '@material-ui/icons/StarHalf';\r\nimport queryString from 'query-string'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n    width: '95%',\r\n    margin: 'auto'\r\n  },\r\n  cardContent: {\r\n    paddingLeft: 0,\r\n    paddingRight: 0,\r\n    flexGrow: 0,\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\r\n  },\r\n  quickAccess: {\r\n    color: \"black\",\r\n    cursor: 'pointer',\r\n    \"&:hover\": {\r\n      color: \"#FF781F\"\r\n    },\r\n    textDecoration: 'none'\r\n  },\r\n  paperLikeShadow: {\r\n    boxShadow: '0 2px 4px 3px rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19)',\r\n  },\r\n}));\r\n\r\nconst catOption =\r\n{\r\n  name: 'Thể loại',\r\n  values: [{ id: 0, name: \"Tất cả\" }].concat(data.category.slice())\r\n}\r\nconst tagOption =\r\n{\r\n  name: 'Tag',\r\n  values: [{ id: 0, name: \"Tất cả\" }].concat(data.tags.slice())\r\n}\r\n\r\nconst yearOption =\r\n{\r\n  name: 'Năm',\r\n  values: [\r\n    {\r\n      id: 0,\r\n      name: \"Tất cả\"\r\n    }, {\r\n      id: 1,\r\n      name: 2021\r\n    }, {\r\n      id: 2,\r\n      name: 2020\r\n    }, {\r\n      id: 3,\r\n      name: 2019\r\n    }, {\r\n      id: 4,\r\n      name: 2018\r\n    }, {\r\n      id: 5,\r\n      name: 2017\r\n    }, {\r\n      id: 6,\r\n      name: 2016\r\n    }, {\r\n      id: 7,\r\n      name: 2015\r\n    }, {\r\n      id: 8,\r\n      name: 2014\r\n    }, {\r\n      id: 9,\r\n      name: 2013\r\n    }, {\r\n      id: 10,\r\n      name: 2012\r\n    }, {\r\n      id: 11,\r\n      name: 2011\r\n    }, {\r\n      id: 12,\r\n      name: \"Trước 2011\"\r\n    }\r\n  ]\r\n}\r\nconst statusOption =\r\n{\r\n  name: \"Trạng thái\",\r\n  values: [\r\n    {\r\n      id: 0,\r\n      name: \"Tất cả\"\r\n    }, {\r\n      id: 1,\r\n      name: \"Đang cập nhật\"\r\n    }, {\r\n      id: 2,\r\n      name: \"Đã hoàn thành\"\r\n    }\r\n  ]\r\n}\r\nconst sortOption = {\r\n  name: \"Sắp xếp\",\r\n  values: [\r\n    {\r\n      id: 1,\r\n      name: \"Xem nhiều nhất\"\r\n    }, {\r\n      id: 2,\r\n      name: \"Đánh giá cao nhất\"\r\n    }\r\n    // , {\r\n    //   id: 3,\r\n    //   name: \"Đánh giá cao nhất năm\"\r\n    // },\r\n    // {\r\n    //   id: 4,\r\n    //   name: \"Đánh giá cao mọi thời dại\"\r\n    // }\r\n  ]\r\n}\r\n\r\nconst itemsperPage = 12;\r\n\r\nfunction Searching() {\r\n  const classes = useStyles();\r\n  const location = useLocation();\r\n  const [input, setInput] = useState(\"\");\r\n  const [chosenCatID, setChosenCatID] = useState([0]);\r\n  const [chosenTagID, setChosenTagID] = useState([0]);\r\n  const [chosenYearID, setChosenYearID] = useState(0);\r\n  const [chosenStatusID, setChosenStatusID] = useState(0);\r\n  const [chosenSortID, setChosenSortID] = useState(1);\r\n  const [resultNum, setResultNum] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [totalNovels, setTotalNovels] = useState(0);\r\n  const [displayedNovels, setDisplayNovels] = useState([]);\r\n  const [values, setValues] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    setValues(event.target.value);\r\n  };\r\n\r\n  const handleClickClearInput = () => {\r\n    setValues(\"\");\r\n  };\r\n\r\n  const handleSearch = (event) => {\r\n    event.preventDefault();\r\n    setInput(values);\r\n  };\r\n\r\n  const handleChangeCat = (i) => {\r\n    let newArr = [0];\r\n    if (i === 0 && !chosenCatID.includes(0)) {              // if select all, deselect all other genre\r\n      newArr = [0];\r\n    }\r\n    else {\r\n      const index = chosenCatID.indexOf(i);                // add or remove genre\r\n      if (index > -1) {                                           // remove genre\r\n        newArr = chosenCatID.filter(id => id !== i);\r\n      }\r\n      else {                                                      // add genre                      \r\n        newArr = [\r\n          ...chosenCatID,\r\n          i,\r\n        ];\r\n      }\r\n\r\n      if (newArr.length === 0) {                                // if List genre is empty, add all\r\n        newArr.push(0);\r\n      }\r\n      if (newArr.length > 1 && newArr.includes(0)) {            // if List genre has 2 or more genre and includes all, remove all\r\n        newArr = newArr.filter(id => id !== 0);\r\n      }\r\n    }\r\n    setChosenCatID(newArr);\r\n  }\r\n\r\n  const handleChangeTag = (i) => {\r\n    let newArr = [0];\r\n    if (i === 0 && !chosenTagID.includes(0)) {              // if select all, deselect all other tag\r\n      newArr = [0];\r\n    }\r\n    else {\r\n      const index = chosenTagID.indexOf(i);                // add or remove tag\r\n      if (index > -1) {                                           // remove tag\r\n        newArr = chosenTagID.filter(id => id !== i);\r\n      }\r\n      else {                                                      // add tag                      \r\n        newArr = [\r\n          ...chosenTagID,\r\n          i,\r\n        ];\r\n      }\r\n\r\n      if (newArr.length === 0) {                                // if List tag is empty, add all\r\n        newArr.push(0);\r\n      }\r\n      if (newArr.length > 1 && newArr.includes(0)) {            // if List tag has 2 or more tag and includes all, remove all\r\n        newArr = newArr.filter(id => id !== 0);\r\n      }\r\n    }\r\n    setChosenTagID(newArr);\r\n  }\r\n\r\n  const handleChangeYear = (i) => {\r\n    setChosenYearID(i)\r\n  }\r\n\r\n  const handleChangeStatus = (i) => {\r\n    setChosenStatusID(i)\r\n  }\r\n\r\n  const handleChangeSort = (i) => {\r\n    setChosenSortID(i)\r\n  }\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(location.search);\r\n    if (parsed.name) {\r\n      setInput(parsed.name + \" \");\r\n      setValues(parsed.name + \" \");\r\n    }\r\n    if (parsed.genre) {\r\n      setChosenCatID([+parsed.genre])\r\n    }\r\n    if (parsed.tag) {\r\n      setChosenTagID([+parsed.tag]);\r\n    }\r\n    // if (parsed.id && parsed.name && parsed.token) { }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const start = (page - 1) * itemsperPage;\r\n    const end = start + itemsperPage - 1;\r\n    let novels = JSON.parse(JSON.stringify(data.novels));\r\n\r\n    console.log(novels)\r\n    if (!chosenCatID.includes(0))\r\n      novels = novels.filter(novel => chosenCatID.every(id => novel.catId.includes(id)));\r\n    if (!chosenTagID.includes(0)) {\r\n      novels = novels.filter(novel => chosenTagID.every(id => novel.tagId.includes(id)));\r\n    }\r\n    // if (chosenYearID !== 0) {\r\n    //   if (chosenYearID !== 12)\r\n    //     novels = novels.filter(novel => novel.year === yearOption.values[chosenYearID].name);\r\n    //   else\r\n    //     novels = novels.filter(novel => novel.year < 2010);\r\n    // }\r\n    if (chosenStatusID !== 0)\r\n      novels = novels.filter(novel => novel.status === statusOption.values[chosenStatusID].id);\r\n\r\n    if (chosenSortID === 1) {\r\n      novels = novels.sort((novel1, novel2) => novel2.view - novel1.view);\r\n    } else if (chosenSortID === 2) {\r\n      novels = novels.sort((novel1, novel2) => novel2.rating - novel1.rating);\r\n    }\r\n\r\n    if (input === \"undefined \" || input.trim() === \"\") {\r\n      setResultNum(\"\");\r\n      const paginatedNovels = novels.filter((item, index) => index >= start && index <= end);\r\n      setTotalNovels(novels.length);\r\n      setDisplayNovels(paginatedNovels);\r\n    } else {\r\n      const novelsByName = novels.filter(novel => novel.name.toLowerCase().includes(input.trim().toLowerCase()));\r\n      const paginatedNovels = novelsByName.filter((item, index) => index >= start && index <= end);\r\n\r\n      setTotalNovels(novelsByName.length);\r\n      setDisplayNovels(paginatedNovels);\r\n      setResultNum(`${novelsByName.length} Kết quả tìm kiếm \"${input.trim()}\"`);\r\n    }\r\n  }, [input, page, chosenCatID, chosenTagID, chosenStatusID, chosenSortID, setTotalNovels]);\r\n\r\n  const calStar = (rating) => {\r\n    const array = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0];\r\n    const result = [];\r\n    for (let i = 0; i < 5; i++) {\r\n      if (array[i] <= rating && array[i + 1] <= rating)\r\n        result.push(<StarIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n      else if (rating === array[i])\r\n        result.push(<StarIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n      else if (array[i] < rating && array[i + 1] > rating) {\r\n        result.push(<StarIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n        result.push(<StarHalfIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n        i++;\r\n      }\r\n      else result.push(<StarBorderIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n    }\r\n    return (\r\n      <span>{result}</span>\r\n\r\n    );\r\n  }\r\n\r\n  const handleEnter = (e) => {\r\n    if (e.key === 'Enter') {\r\n      setInput(values);\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <Container className={classes.cardGrid} maxWidth=\"xl\">\r\n      <div style={{ backgroundColor: '#f3f3f3', textAlign: 'center', borderRadius: '18px', padding: '20px' }}>\r\n        {<Grid container >\r\n          <Grid item xs={12} sm={2} md={1} lg={1}></Grid>\r\n          <Grid item xs={12} sm={10} md={11} lg={11} >\r\n            <div style={{ textAlign: 'left' }}>\r\n              <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" style={{ marginLeft: '20px', marginTop: '20px', marginBottom: '7px', width: '45%' }}>\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">Tên truyện</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type={'text'}\r\n                  label={'Tên truyện'}\r\n                  value={values.trim()}\r\n                  onChange={(e) => handleChange(e)}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickClearInput}\r\n                        edge=\"end\"\r\n                      >\r\n                        <CloseIcon />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={70}\r\n                  onKeyPress={handleEnter}\r\n                />\r\n              </FormControl>\r\n              <IconButton style={{ marginTop: '25px' }} onClick={handleSearch}><SearchIcon /></IconButton>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        }\r\n        {\r\n          <Grid container style={{ marginTop: '7px', marginBottom: '7px' }}>\r\n            <Grid item xs={12} sm={2} md={1} lg={1}>\r\n              <Typography style={{ textAlign: 'right', marginTop: '7px' }}>{catOption.name}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={10} md={11} lg={11}>\r\n              <div style={{ textAlign: 'justify', marginLeft: '20px' }}>\r\n                {\r\n                  catOption.values.map((value, index) => (\r\n                    <button key={index}\r\n                      style={{\r\n                        margin: '5px', backgroundColor: '#e0e0e0', borderRadius: '8px', border: '0px', outline: 'none', cursor: 'pointer',\r\n                        padding: '6px 16px 6px', boxShadow: '0 4px 4px 0px rgba(0, 0, 0, 0.2), 0 4px 4px 0 rgba(0, 0, 0, 0.19)',\r\n                        backgroundColor: chosenCatID.includes(value.id) ? '#2F80ED' : '#E0E0E0',\r\n                        color: chosenCatID.includes(value.id) ? 'white' : 'black'\r\n                      }}\r\n                      onClick={() => handleChangeCat(value.id)}\r\n                    >\r\n                      {value.name}\r\n                    </button>\r\n                  ))\r\n                }\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n        {\r\n          <Grid container style={{ marginTop: '7px', marginBottom: '7px' }}>\r\n            <Grid item xs={12} sm={2} md={1} lg={1}>\r\n              <Typography style={{ textAlign: 'right', marginTop: '7px' }}>{tagOption.name}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={10} md={11} lg={11}>\r\n              <div style={{ textAlign: 'justify', marginLeft: '20px' }}>\r\n                {\r\n                  tagOption.values.map((value, index) => (\r\n                    <button key={index}\r\n                      style={{\r\n                        margin: '5px', backgroundColor: '#e0e0e0', borderRadius: '8px', border: '0px', outline: 'none', cursor: 'pointer',\r\n                        padding: '6px 16px 6px', boxShadow: '0 4px 4px 0px rgba(0, 0, 0, 0.2), 0 4px 4px 0 rgba(0, 0, 0, 0.19)',\r\n                        backgroundColor: chosenTagID.includes(value.id) ? '#2F80ED' : '#E0E0E0',\r\n                        color: chosenTagID.includes(value.id) ? 'white' : 'black'\r\n                      }}\r\n                      onClick={() => handleChangeTag(value.id)}\r\n                    >\r\n                      {value.name}\r\n                    </button>\r\n                  ))\r\n                }\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n        {/* {\r\n          <Grid container style={{ marginTop: '7px', marginBottom: '7px' }}>\r\n            <Grid item xs={12} sm={2} md={1} lg={1}>\r\n              <Typography style={{ textAlign: 'right', marginTop: '7px' }}>{yearOption.name}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={10} md={11} lg={11}>\r\n              <div style={{ textAlign: 'justify', marginLeft: '20px' }}>\r\n                {\r\n                  yearOption.values.map((value, index) => (\r\n                    <button key={index}\r\n                      style={{\r\n                        margin: '5px', backgroundColor: '#e0e0e0', borderRadius: '8px', border: '0px', outline: 'none', cursor: 'pointer',\r\n                        padding: '6px 16px 6px', boxShadow: '0 4px 4px 0px rgba(0, 0, 0, 0.2), 0 4px 4px 0 rgba(0, 0, 0, 0.19)',\r\n                        backgroundColor: chosenYearID === value.id ? '#2F80ED' : '#E0E0E0',\r\n                        color: chosenYearID === value.id ? 'white' : 'black'\r\n                      }}\r\n                      onClick={() => handleChangeYear(value.id)}\r\n                    >\r\n                      {value.name}\r\n                    </button>\r\n                  ))\r\n                }\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        } */}\r\n        {\r\n          <Grid container style={{ marginTop: '7px', marginBottom: '7px' }}>\r\n            <Grid item xs={12} sm={2} md={1} lg={1}>\r\n              <Typography style={{ textAlign: 'right', marginTop: '7px' }}>{statusOption.name}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={10} md={11} lg={11}>\r\n              <div style={{ textAlign: 'justify', marginLeft: '20px' }}>\r\n                {\r\n                  statusOption.values.map((value, index) => (\r\n                    <button key={index}\r\n                      style={{\r\n                        margin: '5px', backgroundColor: '#e0e0e0', borderRadius: '8px', border: '0px', outline: 'none', cursor: 'pointer',\r\n                        padding: '6px 16px 6px', boxShadow: '0 4px 4px 0px rgba(0, 0, 0, 0.2), 0 4px 4px 0 rgba(0, 0, 0, 0.19)',\r\n                        backgroundColor: chosenStatusID === value.id ? '#2F80ED' : '#E0E0E0',\r\n                        color: chosenStatusID === value.id ? 'white' : 'black'\r\n                      }}\r\n                      onClick={() => handleChangeStatus(value.id)}\r\n                    >\r\n                      {value.name}\r\n                    </button>\r\n                  ))\r\n                }\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n        {\r\n          <Grid container style={{ marginTop: '7px', marginBottom: '7px' }}>\r\n            <Grid item xs={12} sm={2} md={1} lg={1}>\r\n              <Typography style={{ textAlign: 'right', marginTop: '7px' }}>{sortOption.name}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={10} md={11} lg={11}>\r\n              <div style={{ textAlign: 'justify', marginLeft: '20px' }}>\r\n                {\r\n                  sortOption.values.map((value, index) => (\r\n                    <button key={index}\r\n                      style={{\r\n                        margin: '5px', backgroundColor: '#e0e0e0', borderRadius: '8px', border: '0px', outline: 'none', cursor: 'pointer',\r\n                        padding: '6px 16px 6px', boxShadow: '0 4px 4px 0px rgba(0, 0, 0, 0.2), 0 4px 4px 0 rgba(0, 0, 0, 0.19)',\r\n                        backgroundColor: chosenSortID === value.id ? '#2F80ED' : '#E0E0E0',\r\n                        color: chosenSortID === value.id ? 'white' : 'black'\r\n                      }}\r\n                      onClick={() => handleChangeSort(value.id)}\r\n                    >\r\n                      {value.name}\r\n                    </button>\r\n                  ))\r\n                }\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n      </div>\r\n\r\n      <h2 style={{ width: '100%', textAlign: 'right' }}>\r\n        {resultNum}\r\n      </h2>\r\n\r\n      <div>\r\n        <Grid container spacing={4}>\r\n          {displayedNovels.map((novel, index) => (\r\n            <Grid item xs={4} sm={3} md={2} lg={2} key={index}>\r\n              <Link to={`/Detail/${novel.id}`} style={{ textDecoration: \"none\", color: \"white\" }}>\r\n                <img src={data.imgURL[novel.id % data.imgURL.length]} className={classes.paperLikeShadow} width=\"93%\" height=\"220px\" style={{ borderRadius: '8px' }}></img>\r\n              </Link>\r\n\r\n              <div>\r\n                <Tooltip title={novel.name} style={{\r\n                  width: \"100%\", display: 'inline-block',\r\n                  whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', fontWeight: 'bold', textAlign: 'left',\r\n                }}>\r\n                  <Link to={`/Detail/${novel.id}`} className={classes.quickAccess}>{novel.name}</Link>\r\n                </Tooltip>\r\n              </div>\r\n              <div style={{ display: 'flex', alignContent: 'center' }}>\r\n                <Tooltip title={\"Điểm đánh giá\"} style={{ textAlign: \"left\", marginRight: '10px' }}>\r\n                  {\r\n                    calStar(novel.rating)\r\n                  }\r\n                </Tooltip>\r\n                <Tooltip title={\"Điểm đánh giá\"}>\r\n                  <Typography> {novel.rating.toFixed(1)}</Typography></Tooltip>\r\n              </div>\r\n\r\n              <div style={{ display: 'flex', alignContent: 'center' }}>\r\n                <Tooltip title={\"Số lượt xem\"} style={{ textAlign: \"left\", marginRight: '10px' }}>\r\n                  <VisibilityIcon />\r\n                </Tooltip>\r\n                <Tooltip title={\"Số lượt xem\"}><Typography> {novel.view}</Typography></Tooltip>\r\n              </div>\r\n\r\n            </Grid>\r\n          ))\r\n            // :\r\n            // //nổi bật nhất\r\n            // displayedNovels.map((novel, index) => (\r\n            //   <Grid item xs={12} sm={4} md={4} key={index}>\r\n            //     <img src={imgURL[Math.floor(Math.random() * Math.floor(imgURL.length))]} width=\"100%\" height=\"220px\" style={{ borderRadius: '8px' }}></img>\r\n            //     <div >\r\n            //       <Typography style={{\r\n            //         width: \"100%\", display: 'inline-block',\r\n            //         whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            //       }}><a href=\"/path\" style={{ color: 'black' }}>{novel.name}</a></Typography>\r\n            //     </div>\r\n            //   </Grid>\r\n            // ))\r\n            // )\r\n          }\r\n        </Grid>\r\n      </div>\r\n      {\r\n        displayedNovels.length !== 0 ?\r\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n            <PaginationRounded\r\n              count={Math.ceil(totalNovels / itemsperPage)}\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              page={page}\r\n              setPage={setPage} />\r\n          </div>\r\n          :\r\n          <></>\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Searching;\r\n\r\nconst useStyles_2 = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    '& .Mui-selected': {\r\n      backgroundColor: '#0057B2',\r\n      color: 'white',\r\n    }\r\n  },\r\n}));\r\n\r\nfunction PaginationRounded({ count, page, setPage }) {\r\n  const classes = useStyles_2();\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <Pagination count={count} page={page} shape=\"rounded\" color=\"primary\" onChange={handleChange} />\r\n    </div>\r\n  );\r\n}","D:\\Github\\WeReApp\\we-read-app\\src\\components\\uploading\\uploading.js",["150","151"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  CircularProgress,\r\n  Typography,\r\n  FormControlLabel,\r\n  FormHelperText,\r\n  Checkbox,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom'\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport * as data from '../../resources/data/data';\r\n\r\nimport GroupHeader from './groupHeader'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    width: '90%',\r\n    minHeight: '100%',\r\n    borderRadius: '4px',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  cardHeader: {\r\n    color: '#FFFFFF',\r\n    backgroundColor: '#0452BB'\r\n  },\r\n  cardContent: {\r\n    padding: '16px 20px',\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  cardContentGrid: {\r\n    width: '90%'\r\n  },\r\n  inputLabel: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'flex-end',\r\n    padding: '8px 0px 24px 0px',\r\n    fontSize: 16,\r\n  },\r\n  editorStyleDes: {\r\n    minHeight: '200px',\r\n    maxHeight: '200px',\r\n  },\r\n  editorStyleChapter: {\r\n    minHeight: '400px',\r\n    maxHeight: '400px',\r\n  },\r\n  toolbarStyle: {\r\n    marginBottom: '0px',\r\n    borderBottom: \"1px solid #C0C0C0\",\r\n  },\r\n  wrapperStyle: {\r\n    border: \"1px solid #C0C0C0\",\r\n  },\r\n  formCheckBoxGrid: {\r\n    textAlign: 'left',\r\n    width: '100%',\r\n    marginBottom: '5px',\r\n    direction: \"row\",\r\n    justify: \"flex-start\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n  formCheckBoxGridItem: {\r\n    marginBottom: '-10px'\r\n  },\r\n  FormHelperText: {\r\n    marginLeft: '14px',\r\n    marginTop: '4px',\r\n  },\r\n  imageBox: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'flex-start',\r\n\r\n  },\r\n  image: {\r\n    height: '168px',\r\n    width: '168px',\r\n    paddingBottom: '10px'\r\n  },\r\n  imageButton: {\r\n    width: '117px',\r\n    height: '36px',\r\n    backgroundColor: '#2196F3',\r\n    marginRight: '10px',\r\n    textTransform: 'none',\r\n  },\r\n  deleteImageButton: {\r\n    minHeight: 0,\r\n    minWidth: 0,\r\n    textTransform: 'none',\r\n    \"&:hover\": {\r\n      backgroundColor: \"#FFFFFF\",\r\n      textDecoration: 'underline',\r\n    }\r\n  },\r\n  uploadButton: {\r\n    backgroundColor: '#2196F3',\r\n    color: '#FFFFFF',\r\n  },\r\n  dialogContent: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginBottom: '20px'\r\n  }\r\n}));\r\n\r\nconst ageGroup = [\r\n  {\r\n    value: 'Mọi lứa tuổi',\r\n    label: 'Mọi lứa tuổi'\r\n  },\r\n  {\r\n    value: 'Teen',\r\n    label: 'Teen'\r\n  },\r\n  {\r\n    value: 'Người lớn 18+',\r\n    label: 'Người lớn 18+'\r\n  }\r\n];\r\n\r\nconst language = [\r\n  {\r\n    value: 'Tiếng Việt',\r\n    label: 'Tiếng Việt'\r\n  },\r\n  {\r\n    value: 'Tiếng Anh',\r\n    label: 'Tiếng Anh'\r\n  },\r\n  {\r\n    value: 'Ngôn ngữ khác',\r\n    label: 'Ngôn ngữ khác'\r\n  }\r\n];\r\n\r\nfunction Uploading() {\r\n  const histoty = useHistory();\r\n\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState({\r\n    title: '',\r\n    shortDes: '',\r\n    longDes: '',\r\n    age: 'Mọi lứa tuổi',\r\n    language: 'Tiếng Việt',\r\n    genre: {},\r\n    tags: {},\r\n    titleChapter: '',\r\n    data: '',\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    title: '',\r\n    shortDes: '',\r\n    longDes: '',\r\n    age: '',\r\n    language: '',\r\n    titleChapter: '',\r\n    data: '',\r\n  });\r\n\r\n  const [selectedFile, setSelectedFile] = useState();\r\n  const [preview, setPreview] = useState();\r\n\r\n  // intial data\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    var temp = {};\r\n    for (var i = 0; i < data.category.length; i++) {\r\n      temp[data.category[i].id] = false;\r\n    }\r\n    var temp2 = {};\r\n    for (var j = 0; j < data.tags.length; j++) {\r\n      temp2[data.tags[j].id] = false;\r\n    }\r\n\r\n    setValues({\r\n      ...values,\r\n      genre: temp,\r\n      tags: temp2\r\n    });\r\n  }, [])\r\n\r\n  // upload image \r\n  useEffect(() => {\r\n    if (!selectedFile) {\r\n      setPreview(undefined);\r\n      return;\r\n    }\r\n\r\n    const objectUrl = URL.createObjectURL(selectedFile);\r\n    setPreview(objectUrl);\r\n\r\n    // free memory when ever this component is unmounted\r\n    return () => URL.revokeObjectURL(objectUrl)\r\n  }, [selectedFile]);\r\n\r\n  const onSelectFile = e => {\r\n    if (!e.target.files || e.target.files.length === 0) {\r\n      setSelectedFile(undefined);\r\n      return;\r\n    }\r\n    setSelectedFile(e.target.files[0]);\r\n    e.target.value = '';\r\n  }\r\n\r\n  const onDeleteImage = (e) => {\r\n    setSelectedFile(undefined);\r\n    return;\r\n  }\r\n\r\n  // handle change of form\r\n  const handleChange = (event) => {                     // change textfield\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  const handleChangeEditorDes = (editorState) => {      // change long des editor \r\n    setValues({\r\n      ...values,\r\n      longDes: editorState\r\n    });\r\n  }\r\n\r\n  const handleChangeEditorData = (editorState) => {   // change data editor \r\n    setValues({\r\n      ...values,\r\n      data: editorState\r\n    });\r\n  }\r\n\r\n  const handleChangeGenre = (event) => {             // change genre checkbox \r\n    setValues({\r\n      ...values,\r\n      genre: { ...values.genre, [event.target.name]: event.target.checked }\r\n    });\r\n  }\r\n\r\n  const handleChangeTags = (event) => {            // change tags checkbox \r\n    setValues({\r\n      ...values,\r\n      tags: { ...values.tags, [event.target.name]: event.target.checked }\r\n    });\r\n  }\r\n\r\n  // validate for form\r\n  const handleValidate = (event) => {                 // validate textfield\r\n    if ((event.target.name === 'title' || event.target.name === 'titleChapter') && event.target.value === '') {\r\n      setErrors({\r\n        ...errors,\r\n        [event.target.name]: \"* Không được để trống\"\r\n      });\r\n    }\r\n    else {\r\n      setErrors({\r\n        ...errors,\r\n        [event.target.name]: \"\"\r\n      });\r\n    }\r\n  }\r\n  const handleValidateEditorDes = (e, editorState) => {   // validate editor\r\n    if (!editorState.getCurrentContent().hasText()) {\r\n      setErrors({\r\n        ...errors,\r\n        longDes: \"* Không được để trống\"\r\n      });\r\n    }\r\n    else {\r\n      setErrors({\r\n        ...errors,\r\n        longDes: \"\"\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleValidateEditorData = (e, editorState) => {\r\n    if (!editorState.getCurrentContent().hasText()) {\r\n      setErrors({\r\n        ...errors,\r\n        data: \"* Không được để trống\"\r\n      });\r\n    }\r\n    else {\r\n      setErrors({\r\n        ...errors,\r\n        data: \"\"\r\n      });\r\n    }\r\n  }\r\n\r\n  var genreList = Object.entries(values.genre);                     // validate genre checkbox\r\n  const selectedGenre = genreList.filter((v) => v[1] === true).length;\r\n  const errorGenre = selectedGenre > 4 || selectedGenre < 1;\r\n\r\n  // submit form\r\n  const onSubmit = async (event) => {\r\n    var tempErrors = { ...errors };\r\n    if (values.title === '') {\r\n      tempErrors.title = \"* Không được để trống\";\r\n    }\r\n    if (values.titleChapter === '') {\r\n      tempErrors.titleChapter = \"* Không được để trống\";\r\n    }\r\n    if (values.longDes === '' || !values.longDes.getCurrentContent().hasText()) {\r\n      tempErrors.longDes = \"* Không được để trống\";\r\n    }\r\n    if (values.data === '' || !values.data.getCurrentContent().hasText()) {\r\n      tempErrors.data = \"* Không được để trống\";\r\n    }\r\n    setErrors(tempErrors);\r\n\r\n    var errorList = Object.entries(tempErrors);\r\n    const hasError = errorList.filter((v) => v[1] !== '').length > 0;\r\n    if (hasError || errorGenre) {\r\n      console.log(tempErrors);\r\n    }\r\n    else {\r\n      setOpenWaiting(true);\r\n      await delay(2000);\r\n      //histoty.push(\"/Detail/1\");\r\n      console.log(values)\r\n      console.log(selectedFile)\r\n    }\r\n  };\r\n\r\n  // dialog for when waiting for quick play\r\n  const [openWaiting, setOpenWaiting] = useState(false);\r\n  const delay = ms => new Promise(res => setTimeout(res, ms));\r\n\r\n  const handleCloseSuccess = (e) => {\r\n    setOpenWaiting(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        open={openWaiting}\r\n        onClose={(e) => handleCloseSuccess(e)}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">Đang đăng truyện...</DialogTitle>\r\n        <DialogContent className={classes.dialogContent}>\r\n          <CircularProgress />\r\n        </DialogContent>\r\n      </Dialog>\r\n      <Container className={classes.root} maxWidth={false}>\r\n        <form autoComplete=\"off\" noValidate>\r\n          <Card>\r\n            <CardHeader className={classes.cardHeader}\r\n              avatar={<MenuBookIcon style={{ fontSize: 30 }} />}\r\n              titleTypographyProps={{ variant: 'h5', align: \"left\" }}\r\n              title=\"Đăng truyện mới\" />\r\n\r\n            <GroupHeader title=\"Thông tin cơ bản\" />\r\n            <CardContent className={classes.cardContent}>\r\n              <Grid container spacing={2} className={classes.cardContentGrid}>\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Tiêu đề </Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\"> *</Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <TextField\r\n                    size=\"small\"\r\n                    error={errors.title !== '' ? true : false}\r\n                    helperText={errors.title !== '' ? errors.title : ''}\r\n                    fullWidth\r\n                    name=\"title\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleValidate}\r\n                    required\r\n                    value={values.firstName}\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Mô tả ngắn</Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\">  </Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <TextField\r\n                    size=\"small\"\r\n                    error={false}\r\n                    helperText={false ? \"daw\" : \"\"}\r\n                    fullWidth\r\n                    name=\"shortDes\"\r\n                    onChange={handleChange}\r\n                    required\r\n                    value={values.firstName}\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Mô tả dài</Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\"> *</Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <Editor\r\n                    toolbarClassName={classes.toolbarStyle}\r\n                    editorClassName={classes.editorStyleDes}\r\n                    wrapperClassName={classes.wrapperStyle}\r\n                    onEditorStateChange={handleChangeEditorDes}\r\n                    onBlur={handleValidateEditorDes}\r\n                  />\r\n                  <FormHelperText className={classes.FormHelperText} error>\r\n                    {errors.longDes !== '' ? errors.longDes : ''}\r\n                  </FormHelperText>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n\r\n            <GroupHeader title=\"Thông tin chi tiết\" />\r\n            <CardContent className={classes.cardContent}> \r\n              <Grid container spacing={2} className={classes.cardContentGrid}>\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Độ tuổi </Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\">  </Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <TextField\r\n                    size=\"small\"\r\n                    fullWidth\r\n                    name=\"age\"\r\n                    onChange={handleChange}\r\n                    required\r\n                    select\r\n                    SelectProps={{ native: true }}\r\n                    value={values.state}\r\n                    variant=\"outlined\"\r\n                  >\r\n                    {ageGroup.map((option) => (\r\n                      <option\r\n                        key={option.value}\r\n                        value={option.value}\r\n                      >\r\n                        {option.label}\r\n                      </option>\r\n                    ))}\r\n                  </TextField>\r\n\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Ngôn ngữ</Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\">  </Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <TextField\r\n                    size=\"small\"\r\n                    fullWidth\r\n                    name=\"language\"\r\n                    onChange={handleChange}\r\n                    required\r\n                    select\r\n                    SelectProps={{ native: true }}\r\n                    value={values.state}\r\n                    variant=\"outlined\"\r\n                  >\r\n                    {language.map((option) => (\r\n                      <option\r\n                        key={option.value}\r\n                        value={option.value}\r\n                      >\r\n                        {option.label}\r\n                      </option>\r\n                    ))}\r\n                  </TextField>\r\n\r\n                </Grid>\r\n\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Thể loại</Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\"> </Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <Grid container spacing={0} className={classes.formCheckBoxGrid}>\r\n                    {data.category.map(genre => (\r\n                      <Grid item xs={3}>\r\n                        <FormControlLabel\r\n                          className={classes.formCheckBoxGridItem}\r\n                          control={<Checkbox onChange={handleChangeGenre} name={genre.id} />}\r\n                          label={genre.name}\r\n                        />\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                  <FormHelperText className={classes.FormHelperText} error={errorGenre}> * Chọn từ 1 tới 4 thể loại </FormHelperText>\r\n                </Grid>\r\n\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Tags</Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\"> </Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <Grid container spacing={0} className={classes.formCheckBoxGrid}>\r\n                    {data.tags.map(tags => (\r\n                      <Grid item xs={3}>\r\n                        <FormControlLabel\r\n                          className={classes.formCheckBoxGridItem}\r\n                          control={<Checkbox onChange={handleChangeTags} name={tags.id} />}\r\n                          label={tags.name}\r\n                        />\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                  <FormHelperText className={classes.FormHelperText}> </FormHelperText>\r\n\r\n                </Grid>\r\n\r\n              </Grid>\r\n            </CardContent>\r\n\r\n            <GroupHeader title=\"Ảnh\" />\r\n            <CardContent className={classes.cardContent}>\r\n              <Grid container spacing={2} className={classes.cardContentGrid}>\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Ảnh bìa truyện </Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\"> </Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <div className={classes.imageBox}>\r\n                    <img className={classes.image} src={preview} alt='' />\r\n                    <Box>\r\n                      <Button className={classes.imageButton} color=\"primary\" variant=\"contained\" component=\"label\">\r\n                        Đăng ảnh\r\n                    <input type='file' hidden onChange={onSelectFile} />\r\n                      </Button>\r\n                      <Button className={classes.deleteImageButton} color=\"primary\" size=\"small\" onClick={onDeleteImage}>\r\n                        Xóa\r\n                    </Button>\r\n                    </Box>\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n\r\n            <GroupHeader title=\"Chương truyện đầu tiên\" />\r\n            <CardContent className={classes.cardContent}>\r\n              <Grid container spacing={2} className={classes.cardContentGrid}>\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Tiêu đề chương </Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\"> *</Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <TextField\r\n                    size=\"small\"\r\n                    error={errors.titleChapter !== '' ? true : false}\r\n                    helperText={errors.titleChapter !== '' ? errors.titleChapter : ''}\r\n                    fullWidth\r\n                    name=\"titleChapter\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleValidate}\r\n                    required\r\n                    value={values.firstName}\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Container className={classes.inputLabel}>\r\n                    <Typography>Nội dung</Typography>\r\n                  &nbsp;\r\n                  <Typography color=\"error\"> *</Typography>\r\n                  </Container>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                  <Editor\r\n                    toolbarClassName={classes.toolbarStyle}\r\n                    editorClassName={classes.editorStyleChapter}\r\n                    wrapperClassName={classes.wrapperStyle}\r\n                    onEditorStateChange={handleChangeEditorData}\r\n                    onBlur={handleValidateEditorData}\r\n                  />\r\n                  <FormHelperText className={classes.FormHelperText} error>\r\n                    {errors.data !== '' ? errors.data : ''}\r\n                  </FormHelperText>\r\n\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n\r\n            <Divider />\r\n            <Box display=\"flex\" justifyContent=\"flex-end\" p={2} >\r\n              <Button className={classes.uploadButton} color='primary' variant=\"contained\" onClick={onSubmit}>\r\n                Đăng truyện\r\n            </Button>\r\n            </Box>\r\n          </Card>\r\n        </form>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Uploading;","D:\\Github\\WeReApp\\we-read-app\\src\\components\\home\\home.js",["152"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { category, novels, topMonth, topWeek, allTime, imgURL } from '../../resources/data/data'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport StarHalfIcon from '@material-ui/icons/StarHalf';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(4, 0, 2),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  card: {\r\n    // height: '100%',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '25%',\r\n  },\r\n  cardContent: {\r\n    paddingLeft: 0,\r\n    paddingRight: 0,\r\n    flexGrow: 0,\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\r\n  },\r\n  cardHeader: {\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\r\n    marginBottom: '-20px'\r\n  },\r\n  fab: {\r\n    width: '35%',\r\n    height: '35%',\r\n    fontSize: '50px',\r\n  },\r\n  tagContent: {\r\n    marginBottom: '10px',\r\n    textAlign: 'left',\r\n    display: 'block',\r\n    width: '100%',\r\n    padding: '10px',\r\n    backgroundColor: '#C4C4C4'\r\n  },\r\n  container: {\r\n    display: 'inline-block',\r\n    width: '100%',\r\n  },\r\n  floatRight: {\r\n    float: \"right\",\r\n    textAlign: 'right',\r\n    width: '70%',\r\n    marginRight: '5px'\r\n  },\r\n  floatLeft: {\r\n    float: \"left\",\r\n    width: '25%'\r\n  },\r\n  paperLikeShadow: {\r\n    boxShadow: '0 2px 4px 3px rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19)',\r\n  },\r\n  quickAccess: {\r\n    color: \"black\",\r\n    cursor: 'pointer',\r\n    \"&:hover\": {\r\n      color: \"#FF781F\"\r\n    },\r\n    textDecoration: 'none'\r\n  }\r\n}));\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    left: 5,\r\n    top: 5,\r\n    padding: '0 4px',\r\n  },\r\n}))(Badge);\r\n\r\nexport default function Home() {\r\n  const classes = useStyles();\r\n  const [chosenCategory, setChosenCategory] = React.useState(1);\r\n  const [sortStrategy, setSortStrategy] = React.useState(0);\r\n  const [topStrategy, setTopStrategy] = React.useState(0);\r\n  const [novelByCat, setNovelByCat] = React.useState(novels.filter(novel => novel.catId.includes(chosenCategory)).sort((novel1, novel2) => novel2.updatedAt - novel1.updatedAt));\r\n  const [displayedNovels, setDisplayNovels] = React.useState([]);\r\n  const [displayedTop, setDisplayedTop] = React.useState(topMonth);\r\n  const [page, setPage] = React.useState(1);\r\n\r\n  const handleChangeCategory = (id) => {\r\n    setChosenCategory(id);\r\n    setPage(1);\r\n  }\r\n\r\n  const calStar = (rating) => {\r\n    const array = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0];\r\n    const result = [];\r\n    for (let i = 0; i < 5; i++) {\r\n      if (array[i] <= rating && array[i + 1] <= rating)\r\n        result.push(<StarIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n      else if (rating === array[i])\r\n        result.push(<StarIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n      else if (array[i] < rating && array[i + 1] > rating) {\r\n        result.push(<StarIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n        result.push(<StarHalfIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n        i++;\r\n      }\r\n      else result.push(<StarBorderIcon key={i} fontSize={\"small\"} style={{ color: \"#FFB400\" }} />);\r\n    }\r\n    return (\r\n      <span>\r\n        {result}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (sortStrategy === 0)\r\n      setNovelByCat(novels.filter(novel => novel.catId.includes(chosenCategory)).sort((novel1, novel2) => novel2.updatedAt - novel1.updatedAt))\r\n    else\r\n      setNovelByCat(novels.filter(novel => novel.catId.includes(chosenCategory)).sort((novel1, novel2) => novel2.rating - novel1.rating));\r\n\r\n  }, [chosenCategory, sortStrategy])\r\n\r\n  React.useEffect(() => {\r\n    if (topStrategy === 0)\r\n      setDisplayedTop(topMonth);\r\n    else if (topStrategy === 1) setDisplayedTop(topWeek);\r\n    else setDisplayedTop(allTime);\r\n  }, [topStrategy]);\r\n\r\n  React.useEffect(() => {\r\n\r\n    const start = (page - 1) * 12;\r\n    const end = start + 12 - 1;\r\n    const paginatedNovels = novelByCat.filter((item, index) => index >= start && index <= end);\r\n    setDisplayNovels(paginatedNovels);\r\n\r\n  }, [page, novelByCat])\r\n  // main unit\r\n  return (\r\n    <>\r\n      <Container className={classes.cardGrid} maxWidth=\"xl\">\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={12} md={2}>\r\n            <Card className={classes.card}>\r\n              <CardHeader title={<b>THỂ LOẠI</b>} style={{ color: \"#FF781F\" }} className={classes.cardHeader} />\r\n              <CardContent className={classes.cardContent}>\r\n                {\r\n                  category.map((item) => (\r\n                    (\r\n                      chosenCategory === item.id ?\r\n                        <Button key={item.id} style={{ textAlign: \"left\", width: \"100%\", marginBottom: \"10px\", borderRadius: '0', backgroundImage: 'linear-gradient(to right, #c1c1c1 0%, #c1c1c1 95%, #FF781F 95%, #FF781F 100%)' }} >\r\n                          <span style={{ width: \"86%\", fontWeight: \"bold\" }}>\r\n                            {item.name}\r\n                          </span>\r\n                          <span style={{ width: \"14%\" }}>\r\n                            <DoubleArrowIcon />\r\n                          </span>\r\n                        </Button>\r\n                        :\r\n                        <Button className={classes.tagContent} key={item.id} style={{ borderRadius: '0', backgroundColor: '#E1E1E1' }}\r\n                          onClick={() => handleChangeCategory(item.id)}\r\n                        >\r\n                          <b>{item.name}</b>\r\n                        </Button>\r\n                    )\r\n                  ))\r\n                }\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={12} md={6}>\r\n            <div style={{ marginBottom: '15px' }}>\r\n              <SimpleFilter sortStrategy={sortStrategy} setSortStrategy={setSortStrategy} />\r\n            </div>\r\n            <div>\r\n              <Grid container spacing={4}>\r\n                {\r\n                  novelByCat.length === 0 ?\r\n                    <Typography>Chưa có mẫu truyện thuộc thể loại này. Xin hãy quay lại sau.</Typography>\r\n                    // mới nhất\r\n                    :\r\n                    // (\r\n                    //   sortStrategy === 0 ?\r\n                    displayedNovels.map((novel, index) => (\r\n                      <Grid item xs={4} sm={3} md={3} key={index}>\r\n                        <Link to={`/Detail/${novel.id}`} style={{ textDecoration: \"none\", color: \"white\" }}>\r\n                          <img src={imgURL[novel.id % imgURL.length]} className={classes.paperLikeShadow} width=\"100%\" height=\"180px\" style={{ borderRadius: '8px' }}></img>\r\n                        </Link>\r\n\r\n                        <div >\r\n                          <Tooltip title={novel.name}\r\n                            style={{\r\n                              width: \"100%\", display: 'inline-block',\r\n                              whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', fontWeight: 'bold', textAlign: 'left',\r\n                            }}>\r\n                            <Link to={`/Detail/${novel.id}`} className={classes.quickAccess}>{novel.name}</Link>\r\n                          </Tooltip>\r\n                        </div>\r\n                        <div style={{ display: 'flex', alignContent: 'center' }}>\r\n                          <Tooltip title={\"Điểm đánh giá\"} style={{ textAlign: \"left\", marginRight: '2px' }}>\r\n                            {\r\n                              calStar(novel.rating)\r\n                            }\r\n                          </Tooltip>\r\n                          <Tooltip title={\"Điểm đánh giá\"}>\r\n                            <Typography> {novel.rating.toFixed(1)}</Typography>\r\n                          </Tooltip>\r\n                        </div>\r\n\r\n                        <div style={{ display: 'flex', alignContent: 'center' }}>\r\n                          <Tooltip title={\"Số lượt xem\"} style={{ textAlign: \"left\", marginRight: '5px' }}>\r\n                            <VisibilityIcon />\r\n                          </Tooltip>\r\n                          <Tooltip title={\"Số lượt xem\"} >\r\n                            <Typography> {novel.view}</Typography>\r\n\r\n                          </Tooltip>\r\n                        </div>\r\n\r\n                      </Grid>\r\n                    ))\r\n                }\r\n              </Grid>\r\n            </div>\r\n            {\r\n              novelByCat.length !== 0 ?\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                  <PaginationRounded\r\n                    count={Math.ceil(novelByCat.length / 12)}\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    page={page}\r\n                    setPage={setPage} />\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={12} md={4}>\r\n            <TopFilter topStrategy={topStrategy} setTopStrategy={setTopStrategy} />\r\n            <div style={{ backgroundColor: '#E1E1E1', paddingTop: \"8px\" }}>\r\n              {\r\n                displayedTop.map((novel, index) => (\r\n                  <div key={index} style={{ backgroundColor: \"#c4c4c4\", borderRadius: \"8px\", marginTop: '5px', marginBottom: '5px', padding: \"10px\" }}>\r\n                    <div className={classes.container} >\r\n                      <div className={classes.floatLeft}>\r\n                        <StyledBadge badgeContent={index <= 2 ? index + 1 : null} color={index === 0 ? \"secondary\" : index === 1 ? \"error\" : \"primary\"}\r\n                          anchorOrigin={{\r\n                            vertical: 'top',\r\n                            horizontal: 'left',\r\n                          }}\r\n                          style={{ marginTop: \"10px\" }}\r\n                        >\r\n                          <Link to={`/Detail/${novel.id}`} >\r\n                            <img src={novel.img} alt={\"Novel avatar\"} width=\"100%\" height=\"130px\" style={{ borderRadius: \"8px\" }} />\r\n                          </Link>\r\n                        </StyledBadge>\r\n                      </div>\r\n                      <div className={classes.floatRight}>\r\n                        <Link to={`/Detail/${novel.id}`} style={{ textDecoration: \"none\", color: \"black\" }}>\r\n                          <Typography style={{ fontSize: \"25px\", fontWeight: \"bold\", textAlign: \"center\" }}>{novel.name}</Typography>\r\n                        </Link>\r\n                        <Tooltip title={novel.desc}>\r\n                          <div style={{\r\n                            textAlign: \"justify\",\r\n                            overflow: \"hidden\",\r\n                            maxHeight: \"5.4em\",\r\n                            lineHeight: \"1.8em\",\r\n                            position: \"relative\",\r\n                            maxWidth: \"100%\",\r\n                          }}>\r\n                            {novel.desc}\r\n                          </div>\r\n                        </Tooltip>\r\n\r\n                      </div>\r\n                    </div>\r\n                    <div style={{ display: 'flex', alignContent: 'center' }}>\r\n                      <Tooltip title={\"Điểm đánh giá\"} style={{ textAlign: \"left\", marginRight: '2px' }}>\r\n                        {\r\n                          calStar(novel.rating)\r\n                        }\r\n                      </Tooltip>\r\n                      <Tooltip title={\"Điểm đánh giá\"} >\r\n                        <Typography> {novel.rating.toFixed(1)}</Typography>\r\n                      </Tooltip>\r\n\r\n                    </div>\r\n                    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                      <span>\r\n                        Tác giả: {novel.author}\r\n                      </span>\r\n                      <span>\r\n                        Ngày đăng: {novel.date}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              }\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Container >\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles_1 = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    display: 'flex',\r\n    justifyContent: 'flex-end'\r\n  },\r\n}));\r\n\r\nconst options = [\r\n  'Mới nhất',\r\n  'Nổi bật',\r\n];\r\n\r\nfunction SimpleFilter({ sortStrategy, setSortStrategy }) {\r\n  const classes = useStyles_1();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  // const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleClickListItem = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index) => {\r\n    setSortStrategy(index);\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root} style={{ backgroundColor: '#fafafa' }}>\r\n      <List component=\"nav\" aria-label=\"Device settings\" style={{ padding: '0px', margin: \"0px\", backgroundColor: \"#c1c1c1\", width: \"12vw\", borderRadius: \"8px\" }}>\r\n        <ListItem\r\n          button\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"lock-menu\"\r\n          aria-label=\"when device is locked\"\r\n          onClick={handleClickListItem}\r\n          style={{ color: 'black' }}\r\n        >\r\n          <ListItemText primary={options[sortStrategy]} />\r\n          < ExpandMoreIcon />\r\n        </ListItem>\r\n      </List>\r\n      <Menu\r\n        id=\"lock-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n      >\r\n        {options.map((option, index) => (\r\n          <MenuItem\r\n            key={option}\r\n            selected={index === sortStrategy}\r\n            onClick={(event) => handleMenuItemClick(event, index)}\r\n          >\r\n            {option}\r\n          </MenuItem>\r\n        ))}\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles_2 = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    '& .Mui-selected': {\r\n      backgroundColor: '#0057B2',\r\n      color: 'white',\r\n    },\r\n    // \"& .MuiPaginationItem\": {\r\n    //   backgroundColor: \"yellow\"\r\n    // },\r\n    // '& .page-item': {\r\n    //   backgroundColor: '#E0E0E0'\r\n    // }\r\n  },\r\n}));\r\n\r\nfunction PaginationRounded({ count, page, setPage }) {\r\n  const classes = useStyles_2();\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <Pagination count={count} page={page} shape=\"rounded\" color=\"primary\" onChange={handleChange} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst topOptions = [\r\n  \"TOP Tháng\",\r\n  \"TOP Năm\",\r\n  \"Mọi thời đại\"\r\n];\r\n\r\nconst useStyles_3 = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n}));\r\n\r\nfunction TopFilter({ topStrategy, setTopStrategy }) {\r\n  const classes = useStyles_3();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClickListItem = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index) => {\r\n    setTopStrategy(index);\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"nav\" aria-label=\"Device settings\" style={{ padding: '0px', margin: \"0px\", backgroundColor: \"#FF781F\", borderRadius: \"0px\" }}>\r\n        <ListItem\r\n          button\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"lock-menu\"\r\n          aria-label=\"when device is locked\"\r\n          onClick={handleClickListItem}\r\n          style={{ color: 'white' }}\r\n        >\r\n          <ListItemText style={{ textAlign: 'center' }} primary={topOptions[topStrategy]} />\r\n          <ExpandMoreIcon />\r\n        </ListItem>\r\n      </List>\r\n      <Menu\r\n        id=\"lock-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n      >\r\n        {topOptions.map((option, index) => (\r\n          <MenuItem\r\n            key={option}\r\n            selected={index === topStrategy}\r\n            onClick={(event) => handleMenuItemClick(event, index)}\r\n          >\r\n            {option}\r\n          </MenuItem>\r\n        ))}\r\n      </Menu>\r\n    </div >\r\n  );\r\n}","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\AnalystCard.js",["153"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Divider,\r\n    Typography,\r\n    colors,\r\n    makeStyles,\r\n    useTheme\r\n} from '@material-ui/core';\r\nimport LaptopMacIcon from '@material-ui/icons/LaptopMac';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport TabletIcon from '@material-ui/icons/Tablet';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        background: 'linear-gradient(45deg, #fac150 30%, #fccf2b 90%)',\r\n        boxShadow: '0 3px 5px 2px rgba(197, 199, 197 .3)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        padding: '0 30px',\r\n    },\r\n    headerTitle: {\r\n        fontSize: \"30px\",\r\n        fontWeight: \"bold\",\r\n        color: \"white\",\r\n        boxShadow: \"rgba(33, 203, 243, .3)\"\r\n    },\r\n}));\r\n\r\nconst AnalystCard = ({ className, ...rest }) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const data = {\r\n        datasets: [\r\n            {\r\n                data: [67, 33],\r\n                backgroundColor: [\r\n                    colors.indigo[500],\r\n                    colors.red[600],\r\n                ],\r\n                borderWidth: 8,\r\n                borderColor: colors.common.white,\r\n                hoverBorderColor: colors.common.white\r\n            }\r\n        ],\r\n        labels: ['Đọc', 'Viết']\r\n    };\r\n\r\n    const options = {\r\n        animation: false,\r\n        cutoutPercentage: 80,\r\n        layout: { padding: 0 },\r\n        legend: {\r\n            display: false\r\n        },\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        tooltips: {\r\n            backgroundColor: theme.palette.background.default,\r\n            bodyFontColor: theme.palette.text.secondary,\r\n            borderColor: theme.palette.divider,\r\n            borderWidth: 1,\r\n            enabled: true,\r\n            footerFontColor: theme.palette.text.secondary,\r\n            intersect: false,\r\n            mode: 'index',\r\n            titleFontColor: theme.palette.text.primary\r\n        }\r\n    };\r\n\r\n    const devices = [\r\n        {\r\n            title: 'Đọc',\r\n            value: 67,\r\n            icon: LaptopMacIcon,\r\n            color: colors.indigo[500]\r\n        },\r\n        {\r\n            title: 'Viết',\r\n            value: 33,\r\n            icon: TabletIcon,\r\n            color: colors.red[600]\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <Card\r\n            className={clsx(classes.root, className)}\r\n            {...rest}\r\n            style={{ height: '400px', width: '300px'}}\r\n        >\r\n            <CardHeader classes={{title: classes.headerTitle}} title=\"THỜI GIAN\" />\r\n            <Divider variant=\"middle\" />\r\n            <CardContent>\r\n                <Box\r\n                    position=\"relative\"\r\n                >\r\n                    <Doughnut\r\n                        data={data}\r\n                        options={options}\r\n                    />\r\n                </Box>\r\n                <Box\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    mt={2}\r\n                >\r\n                    {devices.map(({\r\n                                      color,\r\n                                      icon: Icon,\r\n                                      title,\r\n                                      value\r\n                                  }) => (\r\n                        <Box\r\n                            key={title}\r\n                            p={1}\r\n                            textAlign=\"center\"\r\n                        >\r\n                            <Icon color=\"action\" />\r\n                            <Typography\r\n                                color=\"textPrimary\"\r\n                                variant=\"body1\"\r\n                            >\r\n                                {title}\r\n                            </Typography>\r\n                            <Typography\r\n                                style={{ color }}\r\n                                variant=\"h4\"\r\n                            >\r\n                                {value}\r\n                                %\r\n                            </Typography>\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nAnalystCard.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default AnalystCard;\r\n","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\FavoriteCard.js",["154","155","156"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Divider,\r\n    Typography,\r\n    colors,\r\n    makeStyles,\r\n    useTheme\r\n} from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        background: 'linear-gradient(45deg, #f2775e 30%, #f28872 90%)',\r\n        boxShadow: '0 3px 5px 2px rgba(242, 24, 39, .3)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        padding: '0 30px',\r\n    },\r\n    headerTitle: {\r\n        fontSize: \"30px\",\r\n        fontWeight: \"bold\",\r\n        color: \"white\",\r\n        boxShadow: \"rgba(33, 203, 243, .3)\"\r\n    },\r\n}));\r\n\r\nconst FavoriteCard = ({ className, ...rest }) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const options = {\r\n        animation: false,\r\n        cutoutPercentage: 80,\r\n        layout: { padding: 0 },\r\n        legend: {\r\n            display: false\r\n        },\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        tooltips: {\r\n            backgroundColor: theme.palette.background.default,\r\n            bodyFontColor: theme.palette.text.secondary,\r\n            borderColor: theme.palette.divider,\r\n            borderWidth: 1,\r\n            enabled: true,\r\n            footerFontColor: theme.palette.text.secondary,\r\n            intersect: false,\r\n            mode: 'index',\r\n            titleFontColor: theme.palette.text.primary\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={clsx(classes.root, className)}\r\n            {...rest}\r\n            style={{ height: '400px', width: '300px'}}\r\n        >\r\n            <CardHeader classes={{title: classes.headerTitle}} title=\"yêu thích\" />\r\n            <Divider variant=\"middle\" />\r\n            <CardContent>\r\n                <Box\r\n                    position=\"relative\"\r\n                >\r\n                    <FavoriteIcon style={{ fontSize: 100 , color: red[500]}} />\r\n                </Box>\r\n                <Box\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    align-itmes=\"center\"\r\n                    mt={2}\r\n                >\r\n                    <Typography>DANH SÁCH TRUYỆN YÊU THÍCH</Typography>\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nFavoriteCard.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default FavoriteCard;\r\n","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\SettingCard.js",["157","158"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Divider,\r\n    Typography,\r\n    colors,\r\n    makeStyles,\r\n    useTheme\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        background: 'linear-gradient(45deg, #4d4d4d 30%, #a8a7a7 90%)',\r\n        boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        padding: '0 30px',\r\n    },\r\n    headerTitle: {\r\n        fontSize: \"30px\",\r\n        fontWeight: \"bold\",\r\n        color: \"white\",\r\n        boxShadow: \"rgba(33, 203, 243, .3)\"\r\n    },\r\n}));\r\n\r\nconst SettingCard = ({ className, ...rest }) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const options = {\r\n        animation: false,\r\n        cutoutPercentage: 80,\r\n        layout: { padding: 0 },\r\n        legend: {\r\n            display: false\r\n        },\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        tooltips: {\r\n            backgroundColor: theme.palette.background.default,\r\n            bodyFontColor: theme.palette.text.secondary,\r\n            borderColor: theme.palette.divider,\r\n            borderWidth: 1,\r\n            enabled: true,\r\n            footerFontColor: theme.palette.text.secondary,\r\n            intersect: false,\r\n            mode: 'index',\r\n            titleFontColor: theme.palette.text.primary\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={clsx(classes.root, className)}\r\n            {...rest}\r\n            style={{ height: '400px', width: '300px'}}\r\n        >\r\n            <CardHeader classes={{title: classes.headerTitle}} title=\"CÀI ĐẶT\" />\r\n            <Divider />\r\n            <CardContent>\r\n                <Box\r\n                    position=\"relative\"\r\n                >\r\n                    <SettingsIcon style={{ fontSize: 100 }} />\r\n                </Box>\r\n                <Box\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    mt={2}\r\n                >\r\n                    <Typography>THAY ĐỔI THÔNG SỐ</Typography>\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nSettingCard.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default SettingCard;\r\n","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\AddNovel.js",["159","160"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Divider,\r\n    Typography,\r\n    colors,\r\n    makeStyles,\r\n    useTheme\r\n} from '@material-ui/core';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        background: 'linear-gradient(45deg, #82f76d 30%, #53fa34 90%)',\r\n        boxShadow: '0 3px 5px 2px rgba(17, 245, 51 .3)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        padding: '0 30px',\r\n    },\r\n    headerTitle: {\r\n        fontSize: \"30px\",\r\n        fontWeight: \"bold\",\r\n        color: \"white\",\r\n        boxShadow: \"rgba(33, 203, 243, .3)\"\r\n    },\r\n\r\n}));\r\n\r\nconst AddNovel = ({ className, ...rest }) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const options = {\r\n        animation: false,\r\n        cutoutPercentage: 80,\r\n        layout: { padding: 0 },\r\n        legend: {\r\n            display: false\r\n        },\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        tooltips: {\r\n            backgroundColor: theme.palette.background.default,\r\n            bodyFontColor: theme.palette.text.secondary,\r\n            borderColor: theme.palette.divider,\r\n            borderWidth: 1,\r\n            enabled: true,\r\n            footerFontColor: theme.palette.text.secondary,\r\n            intersect: false,\r\n            mode: 'index',\r\n            titleFontColor: theme.palette.text.primary\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={clsx(classes.root, className)}\r\n            {...rest}\r\n            // style={{ height: '400px', width: '300px', backgroundColor: \"#f5f5f5\"}}\r\n            style={{ height: '400px', width: '300px' }}\r\n\r\n        >\r\n            <CardHeader classes={{ title: classes.headerTitle }} title=\"TRUYỆN\" />\r\n            <Divider />\r\n            <CardContent>\r\n                <Box\r\n                    position=\"relative\"\r\n                >\r\n                    <AddCircleOutlineIcon style={{ fontSize: 100 }} />\r\n                </Box>\r\n                <Box\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    mt={2}\r\n                >\r\n                    <Typography>ĐĂNG TRUYỆN MỚi</Typography>\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nAddNovel.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default AddNovel;\r\n","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\ManagementCard.js",["161","162","163"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Divider,\r\n    Typography,\r\n    colors,\r\n    makeStyles,\r\n    useTheme\r\n} from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\r\n        boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        padding: '0 30px',\r\n    },\r\n    headerTitle: {\r\n        fontSize: \"30px\",\r\n        fontWeight: \"bold\",\r\n        color: \"white\",\r\n        boxShadow: \"rgba(33, 203, 243, .3)\"\r\n    },\r\n}));\r\n\r\nconst ManagementCard = ({ className, ...rest }) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const options = {\r\n        animation: false,\r\n        cutoutPercentage: 80,\r\n        layout: { padding: 0 },\r\n        legend: {\r\n            display: false\r\n        },\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        tooltips: {\r\n            backgroundColor: theme.palette.background.default,\r\n            bodyFontColor: theme.palette.text.secondary,\r\n            borderColor: theme.palette.divider,\r\n            borderWidth: 1,\r\n            enabled: true,\r\n            footerFontColor: theme.palette.text.secondary,\r\n            intersect: false,\r\n            mode: 'index',\r\n            titleFontColor: theme.palette.text.primary\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={clsx(classes.root, className)}\r\n            {...rest}\r\n            style={{ height: '400px', width: '300px'}}\r\n        >\r\n            <CardHeader classes={{title: classes.headerTitle}} title=\"QUẢN LÝ\" />\r\n            <Divider />\r\n            <CardContent>\r\n                <Box\r\n                    position=\"relative\"\r\n                >\r\n                    <AppsIcon style={{ fontSize: 100 }} />\r\n                </Box>\r\n                <Box\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    mt={2}\r\n                >\r\n                    <Typography>DANH SÁCH TRUYỆN ĐÃ ĐĂNG</Typography>\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nManagementCard.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default ManagementCard;\r\n","D:\\Github\\WeReApp\\we-read-app\\src\\components\\profile\\Infor.js",["164","165","166","167"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  makeStyles,\r\n  Chip\r\n} from '@material-ui/core';\r\n\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport defaultImg from '../../resources/images/portrait.jpg';\r\n\r\nconst user = {\r\n  avatar: defaultImg,\r\n  city: 'Thành phố Hồ Chí Minh',\r\n  country: 'Việt Nam',\r\n  jobTitle: 'Author',\r\n  name: 'John Nguyen',\r\n  email: \"john23@gmail.com\",\r\n  timezone: 'GMT-7'\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    marginTop: '24px',\r\n    marginBottom: '24px'\r\n  },\r\n  avatar: {\r\n    height: 100,\r\n    width: 100\r\n  },\r\n  chip: {\r\n    margin: '5px',\r\n  }\r\n}));\r\n\r\nconst Profile = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n\r\n  const handleClick = () => {\r\n    console.info('You clicked the Chip.');\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardContent>\r\n        <Box\r\n          alignItems=\"center\"\r\n          display=\"flex\"\r\n          flexDirection=\"row\"\r\n          justifyContent=\"center\"\r\n        >\r\n          <div>\r\n            <Avatar\r\n              className={classes.avatar}\r\n              src={user.avatar}\r\n            />\r\n          </div>\r\n          <div display=\"flex\" justifyContent=\"flex-start\">\r\n            <Typography\r\n              color=\"textPrimary\"\r\n              gutterBottom\r\n              variant=\"h3\"\r\n            >\r\n              {user.name}\r\n            </Typography>\r\n            <Typography\r\n              color=\"textPrimary\"\r\n              gutterBottom\r\n              variant=\"body1\"\r\n            >\r\n              {user.email}\r\n            </Typography>\r\n            <Typography\r\n              color=\"textSecondary\"\r\n              variant=\"body1\"\r\n            >\r\n              {`${user.city} - ${user.country}`}\r\n            </Typography>\r\n            <Typography\r\n              className={classes.dateText}\r\n              color=\"textSecondary\"\r\n              variant=\"body1\"\r\n            >\r\n              {`${moment().format('hh:mm A')} ${user.timezone}`}\r\n            </Typography>\r\n            <Typography >\r\n              <Chip className={classes.chip} icon={<FaceIcon />} label={\"Exellent Author\"} color=\"primary\" variant=\"outlined\" />\r\n              <Chip className={classes.chip} label=\"#Basic_Reader\" />\r\n              <Chip className={classes.chip} avatar={<Avatar>M</Avatar>} label=\"Best_author\" variant=\"outlined\" />\r\n            </Typography>\r\n          </div>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Profile;\r\n","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\globalStyles.js",[],"D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\ReadingPanel.js",["168"],"import React from 'react';\r\nimport {\r\n  Container,\r\n  makeStyles\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: (theme) => ({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    minHeight: '100px',\r\n    backgroundColor: theme.body,\r\n    paddingTop: '30px',\r\n    paddingBottom: '40px'\r\n  }),\r\n  title: (theme) => ({\r\n    fontSize: '24px',\r\n    marginTop: '10px',\r\n    color: theme.text,\r\n  }),\r\n  paragraph:  (theme) => ({\r\n    lineHeight: 1.6,\r\n    marginTop: '10px',\r\n    marginBottom: '10px',\r\n    whiteSpace: 'pre-wrap',\r\n    textAlign: 'justify',\r\n    color: theme.text\r\n  }),\r\n}));\r\n\r\nconst data = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas elementum, neque eu aliquet suscipit, dolor est tincidunt quam, vel volutpat metus dolor vitae justo. Cras ac mauris mattis, facilisis lacus ut, euismod arcu. Maecenas tincidunt, risus at dapibus congue, risus purus sodales erat, sit amet ultricies purus metus eget libero. Fusce quis lorem sapien. Aliquam erat volutpat. Nullam porttitor mollis varius. Morbi viverra nulla vel sapien lobortis, vitae consectetur augue pharetra. Etiam quis iaculis nibh. Sed pretium tincidunt felis, eget venenatis lorem volutpat eget.\\nVivamus molestie, libero ut scelerisque viverra, sapien nisl faucibus diam, a pellentesque dui nunc maximus felis. Aliquam lacinia ipsum non enim varius, eget malesuada velit gravida. Proin et congue sapien, nec congue erat. Aliquam vitae erat magna. Interdum et malesuada fames ac ante ipsum primis in faucibus. Praesent eu finibus sapien. Vestibulum nisl arcu, faucibus id risus sed, bibendum condimentum dolor. Nunc dapibus efficitur arcu vitae ultricies.\\nSed vitae eros sit amet odio dictum porttitor sed id odio. Sed sagittis dolor quis odio dapibus accumsan. Ut eget velit nibh. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Curabitur tristique elit leo. Nunc vel lectus pretium, venenatis turpis pulvinar, rhoncus odio. Praesent eget odio sed massa semper mattis. Vivamus feugiat tempor leo non fringilla. Integer eu hendrerit mi. Maecenas semper ullamcorper tellus, et consequat justo blandit sit amet. Vestibulum accumsan, magna ut aliquet dictum, nisl nisi blandit sem, non viverra magna sapien vitae ex. Maecenas facilisis orci nec vestibulum commodo. Integer felis felis, aliquam sed condimentum vitae, varius scelerisque odio. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.\\nSed eleifend mattis ullamcorper. Sed porta sem vel nibh blandit, nec dapibus justo interdum. Duis diam libero, volutpat ut pellentesque in, ultrices a ipsum. Nulla quis elementum libero, efficitur sollicitudin elit. Sed facilisis magna non lacus mattis, vitae convallis magna suscipit. Nunc eu enim sit amet mauris ultricies lacinia ut vitae erat. Fusce aliquet metus eu sem mollis faucibus. Integer leo urna, aliquam quis leo nec, congue dignissim diam. Curabitur sed purus risus. Vivamus auctor arcu eu augue rutrum rhoncus. Nullam maximus ligula in diam pharetra cursus. Nullam quis imperdiet enim, eu congue eros. Nunc luctus diam in urna interdum maximus. Pellentesque maximus nunc ut blandit fermentum. Morbi rhoncus purus egestas ipsum fringilla vestibulum.\\nMorbi in magna dui. Integer nunc nibh, posuere eu vulputate eget, eleifend sed neque. Nunc non ante egestas, consectetur arcu eget, elementum lectus. Proin congue nibh in accumsan lacinia. Ut efficitur tincidunt tincidunt. Nullam eu tellus et sem fermentum scelerisque. Integer suscipit, nisl eu rhoncus eleifend, nibh erat faucibus orci, sed aliquam sem turpis sit amet orci.\"\r\nconst ReadingPanel = (props) => {\r\n  const classes = useStyles(props.theme);\r\n\r\n  const customStyle = {\r\n    fontSize: props.fontSize + 'px',\r\n    width: props.indent,\r\n    fontFamily: props.font,\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container component=\"main\" maxWidth=\"lg\" className={classes.container} maxWidth={false}>\r\n        <div className={classes.title}>\r\n          Chapter {props.selected.number}\r\n        </div>\r\n        <div className={classes.title}>\r\n          {props.selected.title}\r\n        </div>\r\n        <div className={`${classes.paragraph}`} style={customStyle}>\r\n          {data}\r\n        </div>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ReadingPanel;","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\InfoPanel.js",["169","170"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n  Container,\r\n  makeStyles,\r\n  Typography,\r\n  Link,\r\n  Tooltip,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { novels, topMonth, imgURL } from '../../resources/data/data'\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport BookmarkIcon from '@material-ui/icons/Bookmark';\r\nimport defaultImg from '../../resources/images/defaultAvatar.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: (theme) => ({\r\n    display: 'inline-block',\r\n    width: '100%',\r\n    marginTop: '15px',\r\n    marginBottom: '15px',\r\n    backgroundColor: theme.body\r\n  }),\r\n  rightContainer: {\r\n    float: \"right\",\r\n    width: '74%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    textAlign: 'left',\r\n  },\r\n  leftContainer: {\r\n    float: \"left\",\r\n    width: '26%',\r\n    textAlign: 'left',\r\n  },\r\n  divider: {\r\n    backgroundColor: 'black'\r\n  },\r\n  image: (theme) => ({\r\n    border: theme.fieldBorder === \"0px\" ? '1px solid' : theme.fieldBorder,\r\n  }),\r\n  title: (theme) => ({\r\n    fontSize: '34px',\r\n    marginRight: '24px',\r\n    color: theme.text\r\n  }),\r\n  button: {\r\n    minWidth: '45px',\r\n    height: '45px',\r\n    color: 'white',\r\n    backgroundColor: '#27ae60',\r\n    borderRadius: '8px',\r\n    marginRight: '10px',\r\n    \"&:hover\": {\r\n      backgroundColor: '#0d5e36',\r\n    }\r\n  },\r\n  author: (theme) => ({\r\n    fontSize: textSize,\r\n    color: theme.link,\r\n  }),\r\n  infoBox: (theme) => ({\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    color: theme.text\r\n  }),\r\n  description: (theme) => ({\r\n    fontSize: textSize,\r\n    wordBreak: 'break-all',\r\n    textAlign: 'justify',\r\n    color: theme.text\r\n  })\r\n\r\n}));\r\n\r\n\r\n\r\nconst textSize = '18px';\r\n\r\nconst InfoPanel = ({ theme, ID }) => {\r\n  const classes = useStyles(theme);\r\n  const histoty = useHistory();\r\n  const [fiction, setFiction] = useState({\r\n    id: 1,\r\n    title: \"Truyện đời tôi\",\r\n    imgURL: \"none\",\r\n    status: 1,\r\n    views: 12345,\r\n    followers: 350,\r\n    description: \"Donec eu tellus ut dolor viverra porta. Aliquam sit amet velit vel odio viverra euismod fringilla eu tellus. Aenean dapibus maximus aliquet. Donec bibendum blandit enim et facilisis.\",\r\n    rating: 3,\r\n    authors: [{\r\n      id: 1,\r\n      name: \"John Nguyen\"\r\n    }],\r\n    comments: [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }, { id: 6 }, { id: 7 }]\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fictionCopy = JSON.parse(JSON.stringify(fiction));\r\n    if (ID <= 25) {\r\n      fictionCopy.title = novels[ID - 1].name;\r\n      fictionCopy.imgURL = imgURL[novels[ID - 1].id % imgURL.length];\r\n    } else {\r\n      fictionCopy.title = topMonth[ID - 25 - 1].name;\r\n      fictionCopy.imgURL = topMonth[ID - 25 - 1].img;\r\n    }\r\n    setFiction(fictionCopy);\r\n  }, [setFiction]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container component=\"main\" maxWidth=\"lg\" className={classes.container} maxWidth={false}>\r\n        <div className={classes.leftContainer}>\r\n          <img height={230} width={200} src={fiction.imgURL === \"none\" ? defaultImg : fiction.imgURL} alt=\"Default fiction\"\r\n            className={classes.image}\r\n          />\r\n        </div>\r\n\r\n        <div className={classes.rightContainer}>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <Typography variant=\"h4\" className={classes.title}>{fiction.title}</Typography>\r\n\r\n            <Tooltip title=\"Bình luận\" aria-label=\"Bình luận\">\r\n              <Button className={classes.button} onClick={() => { histoty.push(\"/Detail/1\"); }}>\r\n                <QuestionAnswerIcon style={{ width: '30px', height: '30px' }}></QuestionAnswerIcon>\r\n              </Button>\r\n            </Tooltip>\r\n            <Tooltip title=\"Lưu vào yêu thích\" aria-label=\"Lưu vào yêu thích\">\r\n              <Button className={classes.button} onClick={() => { histoty.push(\"/Detail/1\"); }}>\r\n                <BookmarkIcon style={{ width: '30px', height: '30px' }}></BookmarkIcon>\r\n              </Button>\r\n            </Tooltip>\r\n          </div>\r\n          <Typography style={{ fontSize: textSize, display: 'flex', color: 'gray' }}>\r\n            Bởi&nbsp;\r\n              {fiction.authors.map(author =>\r\n            <Link key={author.id} className={classes.author} onClick={() => { histoty.push(\"/Profile\"); }}>\r\n              {author.name}&nbsp;\r\n              </Link>\r\n          )}\r\n          </Typography>\r\n          <br></br>\r\n          <div className={classes.infoBox}>\r\n            <Typography style={{ fontSize: textSize, width: '37%' }}>\r\n              Trạng thái:\r\n                {fiction.status === 1 ? \" Đang cập nhật\" : fiction.status === 2 ? \" Hoàn chỉnh\" : \" Bị hủy\"}\r\n            </Typography>\r\n            <Typography style={{ fontSize: textSize, width: '25%' }}>\r\n              Lượt xem: {fiction.views}\r\n            </Typography>\r\n            <Typography style={{ fontSize: textSize, width: '20%' }}>\r\n              Theo dõi: {fiction.followers}\r\n            </Typography>\r\n            <Typography style={{ fontSize: textSize, width: '18%' }}>\r\n              Bình luận: {fiction.comments.length}\r\n            </Typography>\r\n          </div>\r\n          <br></br>\r\n          <Typography className={classes.description}>\r\n            {fiction.description}\r\n          </Typography>\r\n        </div>\r\n      </Container>\r\n    </React.Fragment >\r\n  );\r\n}\r\n\r\nexport default InfoPanel;","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\Toolbar.js",["171","172","173"],"import React, { useState } from 'react';\r\nimport {\r\n  Container,\r\n  Box,\r\n  TextField,\r\n  Typography,\r\n  Switch,\r\n  Tooltip,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport FontDownloadIcon from '@material-ui/icons/FontDownload';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: (theme) => ({\r\n    display: 'flex',\r\n    flexDirection: 'rows',\r\n    justifyContent: 'center',\r\n    backgroundColor: theme.body\r\n  }),\r\n  toolbar: (theme) => ({\r\n    width: 'auto',\r\n    display: 'flex',\r\n    flexDirection: 'rows',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '14px',\r\n    fontSize: '20px',\r\n    color: theme.text\r\n  }),\r\n  marginIcon: {\r\n    marginRight: '5px'\r\n  },\r\n  marginGroup: {\r\n    marginRight: '24px'\r\n  },\r\n  fontIcon: {\r\n    width: '33px',\r\n    height: '33px',\r\n    color: '#2F80ED',\r\n  },\r\n  fontDropdown: {\r\n    width: '200px'\r\n  },\r\n  textField: (theme) => ({\r\n    backgroundColor: theme.body,\r\n    \"& .MuiInputBase-root\": {\r\n      color: theme.text,\r\n      border: theme.fieldBorder,\r\n      backgroundColor: theme.fieldBackground,\r\n      \"& option\": {\r\n        backgroundColor: theme.body,\r\n      }\r\n    },\r\n    \"& .MuiSelect-icon\": {\r\n      color: theme.text,\r\n    }\r\n  }),\r\n}));\r\n\r\nconst data1 = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28];\r\nconst data2 = ['Arial', 'Roboto', 'Cambria', 'Georgia', 'Times New Roman'];\r\nconst data3 = ['50%', '60%', '70%', '80%', '90%'];\r\n\r\nconst Toolbar = (props) => {\r\n  const classes = useStyles(props.theme);\r\n  const [listFontSize, setListFontSize] = useState(data1);\r\n  const [listFont, setListFont] = useState(data2);\r\n  const [listIndent, setListIndent] = useState(data3);\r\n\r\n  const handleChangeFont = (e) => {\r\n    props.setFont(e.target.value);\r\n  }\r\n  const handleChangeFontSize = (e) => {\r\n    props.setFontSize(e.target.value);\r\n  }\r\n  const handleChangeIndent = (e) => {\r\n    props.setIndent(e.target.value);\r\n  }\r\n\r\n  const handleChangeTheme = () => {\r\n    if (props.isDarkMode) {\r\n      props.setIsDarkMode(false);\r\n    }\r\n    else {\r\n      props.setIsDarkMode(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container className={classes.root} maxWidth={false}>\r\n        <Box className={classes.toolbar}>\r\n          <Typography className={classes.marginIcon}>Nền tối</Typography>\r\n          <Switch className={classes.marginGroup} onChange={handleChangeTheme}\r\n            color=\"secondary\" name=\"dark\"\r\n          />\r\n          <Tooltip title=\"Phông chữ\" aria-label=\"Phông chữ\">\r\n            <FontDownloadIcon className={`${classes.fontIcon} ${classes.marginIcon}`} />\r\n          </Tooltip>\r\n          <TextField className={`${classes.fontDropdown} ${classes.marginGroup} ${classes.textField}`}\r\n            size=\"small\" name=\"font\" required select variant=\"outlined\" value={props.font}\r\n            onChange={handleChangeFont} SelectProps={{ native: true }}\r\n          >\r\n            {listFont.map((option) => (\r\n              <option key={option} value={option} >\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </TextField>\r\n          <Typography className={classes.marginIcon}>Cỡ chữ</Typography>\r\n          <TextField className={`${classes.marginGroup} ${classes.textField}`} size=\"small\" name=\"fontSize\"\r\n            required select variant=\"outlined\" value={props.fontSize}\r\n            onChange={handleChangeFontSize} SelectProps={{ native: true }}\r\n          >\r\n            {listFontSize.map((option) => (\r\n              <option key={option} value={option} >\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </TextField>\r\n          <Typography className={classes.marginIcon}>Độ rộng</Typography>\r\n          <TextField className={`${classes.marginGroup} ${classes.textField}`} size=\"small\" name=\"indent\"\r\n            required select variant=\"outlined\" value={props.indent}\r\n            onChange={handleChangeIndent} SelectProps={{ native: true }}\r\n          >\r\n            {listIndent.map((option) => (\r\n              <option key={option} value={option} >\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </TextField>\r\n        </Box>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Toolbar;","D:\\Github\\WeReApp\\we-read-app\\src\\components\\reading\\ControlPanel.js",["174"],"import React from 'react';\r\nimport {\r\n    Container,\r\n    Button,\r\n    makeStyles\r\n} from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: (theme) => ({\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        paddingRight: '0px',\r\n        paddingLeft: '0px',\r\n        backgroundColor: theme.body\r\n    }),\r\n    button: (theme) => ({\r\n        width: '33,3%',\r\n        height: '36px',\r\n        borderRadius: '0px',\r\n        backgroundColor: theme.button,\r\n    }),\r\n    middleButton: (theme) => ({\r\n        borderLeft: theme.fieldBorder === \"0px\" ? \"1px solid #FFFFFF\" : theme.fieldBorder,\r\n        borderRight: theme.fieldBorder === \"0px\" ? \"1px solid #FFFFFF\" : theme.fieldBorder,\r\n    })\r\n}));\r\n\r\nconst ControlPanel = ({ theme }) => {\r\n    const classes = useStyles(theme);\r\n    const histoty = useHistory();\r\n\r\n    const handleChange = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container className={classes.root} maxWidth={false}>\r\n                <Button fullWidth variant=\"contained\" color=\"primary\"\r\n                    className={classes.button} startIcon={<ArrowBackIosIcon />}\r\n                    onClick={() => { histoty.push(\"/Reading\"); }}\r\n                >\r\n                    Chương trước\r\n                </Button>\r\n                <Button fullWidth variant=\"contained\" color=\"primary\" className={`${classes.button} ${classes.middleButton}`}\r\n                    onClick={() => { histoty.push(\"/Detail/1\"); }}\r\n\r\n                >\r\n                    Danh sách chương\r\n                </Button>\r\n                <Button fullWidth variant=\"contained\" color=\"primary\"\r\n                    className={classes.button} endIcon={<ArrowForwardIosIcon />}\r\n                    onClick={() => { histoty.push(\"/Reading\"); }}\r\n                >\r\n                    Chương sau\r\n            </Button>\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ControlPanel;","D:\\Github\\WeReApp\\we-read-app\\src\\components\\uploading\\groupHeader.js",[],"D:\\Github\\WeReApp\\we-read-app\\src\\resources\\data\\data.js",[],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":1,"column":17,"nodeType":"181","messageId":"182","endLine":1,"endColumn":25},{"ruleId":"179","severity":1,"message":"183","line":6,"column":5,"nodeType":"181","messageId":"182","endLine":6,"endColumn":15},{"ruleId":"179","severity":1,"message":"184","line":7,"column":13,"nodeType":"181","messageId":"182","endLine":7,"endColumn":16},{"ruleId":"179","severity":1,"message":"185","line":9,"column":8,"nodeType":"181","messageId":"182","endLine":9,"endColumn":16},{"ruleId":"179","severity":1,"message":"186","line":10,"column":8,"nodeType":"181","messageId":"182","endLine":10,"endColumn":12},{"ruleId":"179","severity":1,"message":"187","line":83,"column":10,"nodeType":"181","messageId":"182","endLine":83,"endColumn":28},{"ruleId":"179","severity":1,"message":"188","line":86,"column":9,"nodeType":"181","messageId":"182","endLine":86,"endColumn":19},{"ruleId":"179","severity":1,"message":"189","line":96,"column":9,"nodeType":"181","messageId":"182","endLine":96,"endColumn":24},{"ruleId":"179","severity":1,"message":"190","line":117,"column":9,"nodeType":"181","messageId":"182","endLine":117,"endColumn":24},{"ruleId":"191","severity":1,"message":"192","line":175,"column":15,"nodeType":"193","endLine":175,"endColumn":40},{"ruleId":"194","severity":1,"message":"195","line":178,"column":15,"nodeType":"196","endLine":178,"endColumn":96},{"ruleId":"179","severity":1,"message":"197","line":2,"column":10,"nodeType":"181","messageId":"182","endLine":2,"endColumn":20},{"ruleId":"179","severity":1,"message":"198","line":2,"column":33,"nodeType":"181","messageId":"182","endLine":2,"endColumn":37},{"ruleId":"179","severity":1,"message":"199","line":10,"column":3,"nodeType":"181","messageId":"182","endLine":10,"endColumn":11},{"ruleId":"179","severity":1,"message":"200","line":87,"column":23,"nodeType":"181","messageId":"182","endLine":87,"endColumn":37},{"ruleId":"179","severity":1,"message":"201","line":2,"column":8,"nodeType":"181","messageId":"182","endLine":2,"endColumn":16},{"ruleId":"179","severity":1,"message":"202","line":19,"column":8,"nodeType":"181","messageId":"182","endLine":19,"endColumn":16},{"ruleId":"203","severity":1,"message":"204","line":122,"column":6,"nodeType":"205","endLine":122,"endColumn":8,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":264,"column":41,"nodeType":"209","messageId":"210","endLine":264,"endColumn":43},{"ruleId":"207","severity":1,"message":"208","line":285,"column":37,"nodeType":"209","messageId":"210","endLine":285,"endColumn":39},{"ruleId":"211","severity":1,"message":"212","line":371,"column":106,"nodeType":"213","messageId":"214","endLine":371,"endColumn":114},{"ruleId":"211","severity":1,"message":"212","line":374,"column":77,"nodeType":"213","messageId":"214","endLine":374,"endColumn":85},{"ruleId":"179","severity":1,"message":"215","line":2,"column":10,"nodeType":"181","messageId":"182","endLine":2,"endColumn":19},{"ruleId":"179","severity":1,"message":"197","line":2,"column":21,"nodeType":"181","messageId":"182","endLine":2,"endColumn":31},{"ruleId":"179","severity":1,"message":"216","line":63,"column":7,"nodeType":"181","messageId":"182","endLine":63,"endColumn":17},{"ruleId":"179","severity":1,"message":"217","line":154,"column":10,"nodeType":"181","messageId":"182","endLine":154,"endColumn":22},{"ruleId":"179","severity":1,"message":"218","line":230,"column":9,"nodeType":"181","messageId":"182","endLine":230,"endColumn":25},{"ruleId":"203","severity":1,"message":"219","line":254,"column":6,"nodeType":"205","endLine":254,"endColumn":8,"suggestions":"220"},{"ruleId":"211","severity":1,"message":"221","line":373,"column":25,"nodeType":"213","messageId":"214","endLine":373,"endColumn":40},{"ruleId":"211","severity":1,"message":"221","line":399,"column":25,"nodeType":"213","messageId":"214","endLine":399,"endColumn":40},{"ruleId":"211","severity":1,"message":"221","line":451,"column":25,"nodeType":"213","messageId":"214","endLine":451,"endColumn":40},{"ruleId":"211","severity":1,"message":"221","line":477,"column":25,"nodeType":"213","messageId":"214","endLine":477,"endColumn":40},{"ruleId":"194","severity":1,"message":"195","line":501,"column":17,"nodeType":"196","endLine":501,"endColumn":166},{"ruleId":"179","severity":1,"message":"222","line":160,"column":9,"nodeType":"181","messageId":"182","endLine":160,"endColumn":16},{"ruleId":"203","severity":1,"message":"223","line":204,"column":6,"nodeType":"205","endLine":204,"endColumn":8,"suggestions":"224"},{"ruleId":"194","severity":1,"message":"195","line":218,"column":27,"nodeType":"196","endLine":218,"endColumn":167},{"ruleId":"179","severity":1,"message":"225","line":17,"column":8,"nodeType":"181","messageId":"182","endLine":17,"endColumn":17},{"ruleId":"179","severity":1,"message":"226","line":4,"column":10,"nodeType":"181","messageId":"182","endLine":4,"endColumn":18},{"ruleId":"179","severity":1,"message":"227","line":12,"column":5,"nodeType":"181","messageId":"182","endLine":12,"endColumn":11},{"ruleId":"179","severity":1,"message":"228","line":41,"column":11,"nodeType":"181","messageId":"182","endLine":41,"endColumn":18},{"ruleId":"179","severity":1,"message":"227","line":12,"column":5,"nodeType":"181","messageId":"182","endLine":12,"endColumn":11},{"ruleId":"179","severity":1,"message":"228","line":38,"column":11,"nodeType":"181","messageId":"182","endLine":38,"endColumn":18},{"ruleId":"179","severity":1,"message":"227","line":11,"column":5,"nodeType":"181","messageId":"182","endLine":11,"endColumn":11},{"ruleId":"179","severity":1,"message":"228","line":39,"column":11,"nodeType":"181","messageId":"182","endLine":39,"endColumn":18},{"ruleId":"179","severity":1,"message":"227","line":12,"column":5,"nodeType":"181","messageId":"182","endLine":12,"endColumn":11},{"ruleId":"179","severity":1,"message":"229","line":16,"column":8,"nodeType":"181","messageId":"182","endLine":16,"endColumn":20},{"ruleId":"179","severity":1,"message":"228","line":39,"column":11,"nodeType":"181","messageId":"182","endLine":39,"endColumn":18},{"ruleId":"179","severity":1,"message":"230","line":8,"column":3,"nodeType":"181","messageId":"182","endLine":8,"endColumn":9},{"ruleId":"179","severity":1,"message":"231","line":10,"column":3,"nodeType":"181","messageId":"182","endLine":10,"endColumn":14},{"ruleId":"179","severity":1,"message":"232","line":12,"column":3,"nodeType":"181","messageId":"182","endLine":12,"endColumn":10},{"ruleId":"179","severity":1,"message":"233","line":49,"column":9,"nodeType":"181","messageId":"182","endLine":49,"endColumn":20},{"ruleId":"191","severity":1,"message":"192","line":44,"column":79,"nodeType":"193","endLine":44,"endColumn":95},{"ruleId":"203","severity":1,"message":"204","line":109,"column":6,"nodeType":"205","endLine":109,"endColumn":18,"suggestions":"234"},{"ruleId":"191","severity":1,"message":"192","line":113,"column":79,"nodeType":"193","endLine":113,"endColumn":95},{"ruleId":"179","severity":1,"message":"235","line":66,"column":24,"nodeType":"181","messageId":"182","endLine":66,"endColumn":39},{"ruleId":"179","severity":1,"message":"236","line":67,"column":20,"nodeType":"181","messageId":"182","endLine":67,"endColumn":31},{"ruleId":"179","severity":1,"message":"237","line":68,"column":22,"nodeType":"181","messageId":"182","endLine":68,"endColumn":35},{"ruleId":"179","severity":1,"message":"238","line":37,"column":11,"nodeType":"181","messageId":"182","endLine":37,"endColumn":23},"no-native-reassign",["239"],"no-negated-in-lhs",["240"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'makeStyles' is defined but never used.","'Box' is defined but never used.","'MenuItem' is defined but never used.","'Menu' is defined but never used.","'mobileMoreAnchorEl' is assigned a value but never used.","'isMenuOpen' is assigned a value but never used.","'handleMenuClose' is assigned a value but never used.","'queryParameters' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useHistory' is defined but never used.","'Link' is defined but never used.","'useTheme' is defined but never used.","'setChapterList' is assigned a value but never used.","'ReactDOM' is defined but never used.","'StarIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ID' and 'fiction'. Either include them or remove the dependency array.","ArrayExpression",["241"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-dupe-keys","Duplicate key 'fontSize'.","ObjectExpression","unexpected","'useParams' is defined but never used.","'yearOption' is assigned a value but never used.","'chosenYearID' is assigned a value but never used.","'handleChangeYear' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'location.search'. Either include it or remove the dependency array.",["242"],"Duplicate key 'backgroundColor'.","'histoty' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["243"],"'PhoneIcon' is defined but never used.","'Doughnut' is defined but never used.","'colors' is defined but never used.","'options' is assigned a value but never used.","'FavoriteIcon' is defined but never used.","'Button' is defined but never used.","'CardActions' is defined but never used.","'Divider' is defined but never used.","'handleClick' is assigned a value but never used.",["244"],"'setListFontSize' is assigned a value but never used.","'setListFont' is assigned a value but never used.","'setListIndent' is assigned a value but never used.","'handleChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},"Update the dependencies array to be: [ID, fiction]",{"range":"253","text":"254"},"Update the dependencies array to be: [location.search]",{"range":"255","text":"256"},"Update the dependencies array to be: [values]",{"range":"257","text":"258"},"Update the dependencies array to be: [ID, fiction, setFiction]",{"range":"259","text":"260"},[3298,3300],"[ID, fiction]",[6775,6777],"[location.search]",[4158,4160],"[values]",[2833,2845],"[ID, fiction, setFiction]"]